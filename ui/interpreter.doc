/****************************************************************************/
/*																			*/
/* File:	  interpreter.doc												*/
/*																			*/
/* Purpose:   documentation for ug's command interpreter					*/
/*																			*/
/* Author:	  Nicolas Neuss													*/
/*			  Institut fuer Angewandte Mathematik							*/
/*			  Universitaet Heidelberg										*/
/*			  Im Neuenheimer Feld 294										*/
/*			  69120 Heidelberg												*/
/*			  internet: neuss@uni-stuttgart.de							*/
/*																			*/
/* History:   18.02.92 begin, ug version 2.0								*/
/*			  10.05.92 begin, ug interpreter by Nicolas Neuss				*/
/*			  07.09.95 begin, these pages by Nicolas Neuss					*/
/*																			*/
/* Remarks:   better late than never										*/
/*																			*/
/****************************************************************************/

/*D
   Interpreter - UGs command interpreter

   SHORT DESCRIPTION:
   The interpreter provides `ug` with a simple programming language 
   similar to C to enhance its flexibility while allowing its
   core routines to remain simple.
   The programs are simple text files which may be written with
   any text editor. This allows the use
   of `ug` even when only a very crude user interface is available.
   
   EXAMPLE:
   The following example realizes an adaptive cycle in the script language.

.vb
    :l=0;                   # set :l to 0
       clear x $a;          # ug: clear x-field everywhere
       assemble $a;         # ug: assemble matrix and right hand side
       solve $d;            # ug: solve
       repeat
       {
              feerror;      # ug: print the total error
              estimate;     # ug: mark elements for refinement
              if (:est:cnt==0) break;     # nothing to refine
              if (:l==:maxstep) break;    # reached max. nr. of steps
              refine;                     # ug: refine
              :l=:l+1;               # increment counter
              print 'STEP ', :l;     # print step
              interpolate;           # ug: interpolate to new regions
              assemble $a;           # ug: assemble (all)
              solve $d;              # ug: solve
       }
.ve
   Because of the comments this routine is self-explaining. The
   terminating ';' and the use of the brackets '{}' for grouping several
   statements into a single one, is exactly as in the C-language. Observe
   that one can exit a repeat loop only by using the 'break' statement.
   The colon in the variable names is
   explained in the section about structures. Remark the calling of
   the `ug`-commands, and that the number of refined elements was
   returned to the interpreter in the variable 'cnt' (lying inside
   the structure 'est'). For more information on this you should
   look at the sections about `ug`-commands and variable exchange below.
   
   In the scripts this routine is defined as a string which then
   is executed via the @-operator, see the section about `Substitution`.

   COMMAND SEPERATION AND COMMENTS:
   Like in the C language, commands are seperated by the character ';'
   and grouped to a single one with the brackets '{}'.
   '\n' and '\t' are allowed as formatting characters.
   
   Comments may be given at the end of the line. They start with the
   character '#' and terminate with the end of the line.

   REPEAT-BREAK-CONTINUE:
   'repeat <statement>' repeats the following statement until
   it is stopped with the command 'break'. For example
.vb
    i=1; repeat {if (i>10) break; print i," ",; i=i+1;} print;
.ve
   counts from 1 to 10.
   
   'continue' has the same meaning as in C, i.e. it jumps to the beginning
   of the loop.

   IF-THEN-ELSE:
   This has exactly the format of the if-then-else statement of the C language.
   Especially the condition has to be in brackets. An example is
.vb
    if (a>b) c=a; else c=b;
.ve
   which sets 'c' to the maximum of 'a' and 'b'. 
   
   A difference to the 'if'-command in C is that if the second statement is
   again an if-then-else-construct, it has to be set in brackets '{}' to
   work correctly!

   VARIABLES:
   The interpreter knows only text variables and directories
   of those, which are called structures. All these are
   located in the '/Strings'-directory which is allocated during initialization
   of the interpreter.
   The syntax rules for variable and structure names is the same as in C,
   i.e. they start with an alphabetical character, may contain numbers and are
   case sensitive.
   
   Variables are created (if they do not yet exist) by the assignment command
.vb
    variable-name=<expression>
.ve
   Examples are 'a=1', 'a="Hallo"', 'a=3*c+b'.
   Alternatively one can express the first two cases using the historically
   earlier form 'set a 2' resp. 'set a Hallo'. Together with the
   'print' command described in section `Input and Output` one can look
   at their values with 'set a' (or 'print a').
   Constant strings may be enclosed either in single or double quotes, which
   is of use mainly in the simulation of procedures, see section `Substitution`.
   Variables may be deleted with the command 'dv'.
   
   STRUCTURES:
   A structure may be inductively defined as a
   (of course finite, more precisely the depth is restricted by 32) set
   consisting of variables and structures.
   One can generate a structure by using the command 'ms' (make structure),
   one can delete it (even if it is not empty!) by using 'ds'
   (delete structure).
   
   Variables inside a structure can be
   referenced by
.vb
    structure-name:variable-name
.ve
   As in the environment tree (see the corresponding
   description in 'ugenv') there is a working structure, which can be changed
   by the command 'cs' and looked at by 'pws'. This is entirely analogous to
   the environment commands 'cd' and 'pwd', only the '/' has to be replaced
   by a colon. Therefore, it often is not nescessary to type
   the whole path name of a variable starting from the root structure
   corresponding to the '/Strings' directory. Nevertheless, if
   (for example inside a procedure, see section `Substitution`) one is
   not sure what is the working structure, one should prefer the absolute path
   to the relative one.
   
   The contents of a structure with name 'name' may be listed by the command
   'set name', 'set' alone gives the contents of the working structure.
   The parameter '$r' makes the command to print recursively also the
   contents of the structures that are contained in the initial one.

   ARITHMETIC OPERATORS:
   It is possible to perform all basic arithmetic operations
   '+', '-', '*', '/', and also to determine the order of evaluation
   with the brackets '()'. If variables are used, they should
   contain strings, that can be interpreted as numbers.
   
   COMPARISONS:
   One can compare two strings with the operators '==', '!=', '<=', '>='
   which have the same meaning as in C. If both strings can be interpreted
   as numbers their numeric value is used for the comparison.
   As in C false expressions have value zero and true expressions have
   non-zero value (usually one). Therefore one can simulate the logical operation
   'AND' by '*' and 'OR' by '+'.
   
   FUNCTIONS:
   The interpreter understands the functions
.n sqrt - square root
.n exp, log - e to the power of, and natural logarithm
.n sin, cos - sine and cosine
.n floor - gives the largest integer smaller than the argument
.n fabs - gives the absolute value of the argument

   If further functions should be needed, it is easily possible to
   introduce them by changing the routine 'GetFactor' in the file
   'ug/ui/cmdint.c'.

   INPUT:
   The value of a variable 'name' may be asked from a user at runtime
   by using the command 'input name'. If no 'name' is given, the input
   is ignored, which may be used to wait until the ENTER-key is pressed.

   OUTPUT:
   The value of arbitrary expressions may be printed in an unformatted
   way by using the command
.vb
    print expr1,expr2, ...
.ve
   which prints first expr1, then expr2 and so on immediately after each
   other (so spaces must be explicitly given in the list).
   At the end a '\n'-character (i.e. CRLF) is sent, unless the
   last expression is empty (i.e. the statement terminates with a comma).

   SUBSTITUTION:
   With the character '@' the following token is interpreted as
   a variable name and its value is inserted. This can be used in
   
   INDIRECT REFERENCING:
   If a variable 'x' is the name of another variable, say 'y' then
   @x may be used instead of y inside of expressions.
   
   Inside of variable names an expansion is possible by using the square
   brackets '[]'. In this case the value of the expression inside the
   brackets is inserted into the name.
   This allows a simulation of arrays. For example, one can
   access the variables 'x1', 'x2', ... with 'x[i]' if 'i' contains
   a suitable integer.

   SUBROUTINES:
   Setting the string 'name' to some sequence of commands, these commands are
   executed, if the interpreter runs upon a '@name'-statement.
   At the moment the commands from the string are always executed
   as a single command, which is usually what one would want.
   Since simple expansion would also be reasonable, it is recommended to
   enclose them additionally in brackets as in the example below.
   It is also useful to put them in a seperate structure (e.g. '[colon]P'),
   since they often give very long listings.
   Perhaps in later releases subroutines
   will not be put in the '/Strings'-tree anyhow. Remember here the
   possibility to define constant strings also in such subroutines
   by using the other type of quotes, for example
.vb
    TenTimesHi="{
        i=0; repeat {
            if (i==10) break;
            print 'Hi',i;
            i=i+1;
        }
    }";
.ve
   is possible.
   
   UG COMMANDS:
   If the interpreter finds a token it does not understand, it
   tries to interpret it as an `ug`-command. This is done in a first
   pass by searching exactly the word given in the list of `ug`-commands,
   which are located in the '/menu' directory. If it does not succeed
   a second pass is done, in which the interpreter tries to
   give it a meaning as a case insensitive abbreviation of an
   `ug`-command.
   
   If the command is found, the whole line is splitted into several
   strings, using the character '$' as seperation sign. The first
   string starts with the name of the command, the further ones
   are options to the command. The C-routine of the command obtains
   the number of these pieces (arguments) together with an array
   of pointers to them.
   
   To pass the values of interpreter variables to the C-function
   of an `ug`-command, and to bring information back to the interpreter,
   one can use the methods described below. 

   You can easily install a new `ug`-command.
   This is described in the man page 'commands'.

   VARIABLE EXCHANGE 1:
   The C-functions of `ug` or one of its applications
   can access the interpreter variables by using the C-functions
.vb
INT   SetStringVar           (const char *name, char *sval);
INT   SetnStringVar          (const char *name, const char *sval, int n);
INT   SetStringValue         (const char *name, double value);
char *GetStringVar           (const char *name);
INT   GetStringValueDouble   (const char *name, double *value);
INT   GetStringValueInt      (const char *name, int *value);
INT   GetStringDOUBLEInRange (const char *name, DOUBLE min, DOUBLE max, DOUBLE *value);
INT   GetStringINTInRange    (const char *name, INT min, INT max, INT *value);
.ve
   
   These procedures can be found in the file 'ug/low/ugstruct.c'.
   To use them elsewhere, the file 'ugstruct.h' has to be included.
   For a more detailed description you should read the man pages
   for the procedures themselves.
   
   VARIABLE EXCHANGE 2:
   The expansion of variables may also be used to use variable
   values as arguments of `ug`-commands. For example
.vb
    open @nameOfGrid1 $d @nameOfDomain1 $p ... $f ... $h @heapSize1;
.ve
   may be useful.

   MISCELLANEOUS:
   The command 'mute -1' cancels the echoing of `ug`-commands, 'mute 0'
   restores the echoing (which is the default state). 'mute -1000' suppresses
   also the output of `ug` commands.
   
   'exit 0' makes the interpreter to proceed even when errors of
   `ug`-commands occur (the error code is put into the variable
   'cmdstatus' in the root structure), 'exit 1' returns to the initial state.
   
   Usually when an (interpreter) error occurs also its position
   is shown by printing the command line with an indicator below.
   
   In the 'ui' directory exists also a script file 'intcheck.scr',
   which checks some functionality of the interpreter.
   
   SEE ALSO:
   'commands'
D*/
