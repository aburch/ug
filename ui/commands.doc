/***********************************************************/
/** \page commands Commands - User commands for the ug shell script
	
	DESCRIPTION:	
	Commands are used on the shell or in a script to perform ug functions
    and to pass parameters, e. g. 

.n  'clear x $a $v 0'

    resets 'x' on a specified value. The parameters are seperated by '$'.
    Here, the first parameter follows after the command name,
	the option '$a' performs this command on all levels and '$v'
	specifies the value.
	
	All ug commands can be found in 'commands.c'. On the shell,
	'help <command>' will give information on the command,
	'checkhelp' prints a list of all commands where the help entry is 
    missing.

	HOW TO CREATE USER COMMANDS:
	To include a new command to `ug3` one has to provide a 
	Command funcion. The Command function has a fixed form.
	The fixed form in detail is described in the example below. 
	The only purpose of the command function is to read the parameters
    and to call the corresponding ug functions.
	A command function has as arguments only the variables
	'INT arg' and 'char **argv' to pass the parameters. 
	The command function has to give back
	'return' values, that means error codes, in a mode typical to `ug3`.
	The possible and expected 'return' values are 'OKCODE',
	'PARAMERRCODE' and 'CMDERRORCODE'.
	Finally, the user has to enter the command function in an initialization 
	process.
	There the user has to include the new command with the 'CreateCommand' 
	function.
	
	EXAMPLE:
	As guided example the embedding of the 'MakeStructCommand' is 
	demonstrated step by step.	
	
.vb
static INT MakeStructCommand (INT argc, char **argv)
{	
    INT res;
    char name[LONGSTRSIZE];
	
    NO_OPTION_CHECK(argc,argv);
	
    res = sscanf(argv[0],expandfmt(CONCAT3(" ms %",LONGSTRLENSTR,
	               "[0-9:.a-zA-Z_]")),name);
    if (res!=1)
    {
        PrintHelp("ms",HELPITEM," (could not read name of struct)");
        return(PARAMERRORCODE);
    }
	
    if (MakeStruct(name)!=0)
        return (CMDERRORCODE);
    else
        return (OKCODE);
}
.ve
	
	INITIALIZATION:
	All commands have to be built with 'CreateCommand'. All ug commands 
    are inizialized in 'commands.c', the problem specific commands 
    can be created in the corresponding 'pclib'.
	
.vb
INT InitCommands ()
{
    if (CreateCommand("ms",MakeStructCommand)==NULL) return (__LINE__);
    ...
    return(0);
}
.ve

 	In this case, the name of the command is `ms`.

    SEE ALSO:
	'interpreter', 'unixcommands'

*/


/****************************************************************************/
/*! \page quit quit - Quits UG

   DESCRIPTION:
   This command quits the program and closes the shell.

   'quit'
   
   KEYWORDS:
   exit, terminate, bye
*/
/****************************************************************************/


/****************************************************************************/
/** \page   exitug  exitug - Exits UG

   DESCRIPTION:
   This command exits the current application and closes the shell.

   'exitug'
   
   KEYWORDS:
   terminate, bye, tschuess
*/
/****************************************************************************/

/****************************************************************************/
/** \page mute mute - Set mutelevel

   DESCRIPTION:
   This command sets a mutelevel. 
   The default value is 0 and all skript lines will be printed on the shell.
   This will be suppressed by mutelevel -1.
   Smaller muteleveles should reduce the output further.
   A mutelevel of -1000 supresses all output to shell.

   'mute \<value>'
.   \<value> - integer which gives the mutelevel

   REMARK:
   Formally, this is not an ug command, 'mute' is checked in 
   'InterpretString'.
   
   KEYWORDS:
   verbose, quiet, silent
*/
/****************************************************************************/

/****************************************************************************/
/** \page   help help - Print help for a command or keyword

   DESCRIPTION:
   This command prints help for a given helpitem, e.g. a command. The helpitem
   is looked up case insensitive. Command names can be abbreviated as if they
   where called from the shell window.

   help [[\<helpitem>] $k]

.   no~option      - this is  equivalent to 'help help'
.   \<helpitem>     - print help for \<helpitem> (string)
.   $k             - search for keyword \<helpitem> (multiple occurence)

   EXAMPLE:
   'help PlotObj'
   
   prints help for the plotobject command.
   
   'help plot $k'

   prints a list of all commands which are relevant for plotting
   (openwindow, setview, zoom ...)
*/
/****************************************************************************/

/****************************************************************************/
/** \page   checkhelp checkhelp - Check wether all commands in /menu have a help item

   DESCRIPTION:
   This function checks wether for all commands in /menu a help item exists.
   It also checks wether for all num proc types a help item exists.
   
   It prints all commands and num proc types for which help does NOT exist.
 
   It calls the funtion 'CheckHelp'.

   EXAMPLE:
   'checkhelp'
   
   KEYWORDS:
   check
*/
/****************************************************************************/


/****************************************************************************/
/** \page   cmfn cmfn - Creates a metafile name

   DESCRIPTION:
   This command creates a metafile names.
   It creates a string containing the name of a metafile name for
   animation by xugv.

   'cmfn \<name> \<var>'

.  \<name> - first part of the metafile names
.  \<var> - the contents of var will be appended to the name

   EXAMPLE:
.vb
frame="
    cmfn film step;
    openwindow 0 0 820 420 $d meta $n \@film;
    openpicture $s 10 10 800 400 $n framepic;
    setplotobject EScalar $e S2 $m COLOR $d 0 $f 0.0 $t 1.0;
    setview;
    zoom 0.4;
    plot;
    closewindow;
";
step = 0;
steps = 100;
\@frame;
repeat {
    print "STEP ", step;
    \@mysolve; 
    step=step+1;
    \@frame;
    if (step==steps) break;
}
.ve

   This runs 'mysolve' 100 times and 
   creates metafiles 'film.0000', 'film.0001', 'film.0002', ... 'film.0100'.
   
   KEYWORDS:
   movie, film
*/
/****************************************************************************/

/****************************************************************************/
/** \page   readclock readclock - Print execution time

   DESCRIPTION:
   This command is for measuring the time used.
   It prints the execution time since the last 'resetclock' to
   string variable ':CLOCK'.

   'readclock'   
   
   KEYWORDS:
   time, stopwatch, clock
   
   SEE ALSO:
   resetclock;
*/
/****************************************************************************/

/****************************************************************************/
/** \page   resetclock resetclock - Start the time mesuring

   DESCRIPTION:
   This command starts the time mesuring. 
   It sets the global variable 'Time0' to zero.

   'resetclock'
   
   KEYWORDS:
   time, stopwatch, clock
   
 * \sa readclock
*/
/****************************************************************************/

/****************************************************************************/
/** \page   date date - Prints the date

   DESCRIPTION:
   This command prints the date to the shell resp. 
   writes it in the string variable ':date'.

   'date [$s] [$S]'

.  no~option - print the date to the shell
.  $s  		 -  put in the string variable ':date'.
.  $S   	 -  use short format of the form yy.mm.dd
   
   KEYWORDS:
   time, calendar
   
   SEE ALSO:
   'resetclock', 'readclock'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ls ls - Lists the content of an environment directory.

   DESCRIPTION:
   This command lists the content of an environment directory.

   'ls [\<path>]'

.  no~option - lists the content of the current directory.
.  \<path>    - contains the relative or absolute path in UNIX-style
   
   KEYWORDS:
   environment, directory, list
*/
/****************************************************************************/

/****************************************************************************/
/** \page cd  cd - Change the current environment directory.

   DESCRIPTION:
   This command changes the current environment directory.
   It uses the function 'ChangeEnvDir'.

   'cd [\<path>]'

.  no~option - cd to root (cd /)
.  \<path>	 - \<path> contains the relative or absolute path in UNIX-style
   
   KEYWORDS:
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pwd pwd - Print the current environment directory

   DESCRIPTION:
   This command print the current environment directory to the shell.
   It uses the function 'CangeEnvDir'.

   'pwd'
   
   KEYWORDS:
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   envinfo envinfo - Print total size and used memory

   DESCRIPTION:
   This command prints total size and used memory of the emvironment to shell.

   'envinfo'
   
   KEYWORDS:
   environment, size, heap, memory
*/
/****************************************************************************/

/****************************************************************************/
/** \page   set set - Set (or print) a string variable struct	

   DESCRIPTION:
   This command sets (or prints) a string variable struct.
   If it is not existing it is also created.
   It sets or prints the contents of a struct or struct directory.

   'set {\<struct> \<value>} | {[\<structdir> | \<struct>] [$r]}'

.  \<struct>~\<value>   			- assign \<value> (just a string of arbitrary length) to \<struct>
.  [\<structdir>|\<struct>]~[$r]  - display contents of \<struct> or \<structdir> 
.n                                (default: current struct dir)
.  $r        					- specifies the directory, its contents is listed recursively
   
   KEYWORDS:
   variable, create, set, assign, value, struct, show, display, print

  \sa structpath
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dv dv - Delete an existing string variable

   DESCRIPTION:
   This command deletes an existing string variable from the environment.

   dv \<variable name>

.  \<variable name>    - \<variable name> consists of a complete path related to the
                        current struct dir or the structure root directory in the environment
   
   KEYWORDS:
   variable, remove, delete

   SEE ALSO:
   def, structpath, dv
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ms ms  - Create a structure

   DESCRIPTION:
   This commands creates a new string variable struct.
   It calls the function 'MakeStruct'.

   'ms \<structdir>'

.  \<structdir>     - the \<structdir> consists of a complete path related to the
                     current struct dir or the string variable root in the environment
   
   KEYWORDS:
   variable, create, struct

   SEE ALSO:
   'structpath'
*/
/****************************************************************************/

/****************************************************************************/
/** \page cs  cs  - Change to a struct directory
 *
   DESCRIPTION:
   This commands changes to a struct directory.
   It calls the function 'ChangeStructDir'.

   'cs \<structdir>'

.  \<structdir>   - the \<structdir> consists of a complete path related to the
                   current struct dir or the string variable root in the environment
   
   KEYWORDS:
   variable, struct, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pws  pws  - Print the current struct path

   DESCRIPTION:
   This commands calls the function 'GetStructPathName' and 
   prints the result to the shell.

   'pws'
   
   KEYWORDS:
   variable, print, display, show, struct
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ds ds  - Deletes a struct 

   DESCRIPTION:
   This commands calls the function 'DeleteStruct' to remove a struct.

   'ds \<structdir>'

.  \<structdir>   - the \<structdir> consists of a complete path related to the
.n                 current struct dir or the string variable root in the environment
   
   KEYWORDS:
   variable, delete, remove, struct
   
   SEE ALSO:
   dv, structpath

*/
/****************************************************************************/

	
/****************************************************************************/
/** \page protocol protocol - Print strings to the protocol file

   DESCRIPTION:
   This command prints strings to protocol file.
   It writes formatted output to the open protocol file.

   'protocol {$i[ ]\<verbatim text> | $n[ ]\<verbatim text> | $t[ ]\<verbatim text> | $f}*'

.   $%i   - append \<verbatim text> to protocol file
.   $%n   - write a line feed and append \<verbatim text> to protocol file
.   $%t   - write a tab and append \<verbatim text> to protocol file
.n          NOTE: the first space (if there) following the option character is skipped
.   $%f   - flush the file buffer

   EXAMPLE:
.vb
x = exp(1);
protoOn exp.proto;
protocol $%i the value of exp(1) is $%t \@x;
protocol $%n you can use $s in protocol;
protoOff 
.ve

Then, the file 'exp.proto' will consist of the string
.vb
"the value of exp(1) is\t2.7182818\nyou can use $s in protocol"
.ve
   
   KEYWORDS:
   protocol, file, output, format
  
   SEE ALSO:
  'protoOn', 'protoOff'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOn protoOn - Open protocol file where specially formatted output is saved
  
   DESCRIPTION:
   This command opens protocol file where specially formatted output is saved.

   'protoOn \<filename> [$r[!] | $a]'

.   \<filename>  - name of the protocol file      
.    $r!        - if a file named \<filename> exist already, rename it to \<filename>.saved
.n                break if the renaming fails
.   $r          - like above but proceed even if renaming fails
.   $a          - append to existing file named \<filename>
   
   KEYWORDS:
   protocol, file, open, output, format

   SEE ALSO:
   'protoOff', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOff - close protocol file 
  
   DESCRIPTION:
   This command closes the protocol file.

   'protoOff'
   
   KEYWORDS:
   protocol, file, close, output, format

   SEE ALSO:
   'protoOn', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page logon logon - open log file where all shell output is saved
  
   DESCRIPTION:
   This command opens a log file where all shell output is saved.

   'logon \<logfilename> [$p] [$e] [$a] [$f] [$r [0|1]]'

.   \<filename>  - name of logfile
.   $p			- write log to open protocol file
.   $e			- extend filename with numbers of processors (parallel only)
.   $a			- extend filename with processor id (parallel only)
.   $f			- force (close open logfile iff)
.   $r~[0|1]	- 0: replace (default), 1: rename existing log file (using modification date)
   
   KEYWORDS:
   protocol, file, open, output

   SEE ALSO:
   'logoff'    
*/
/****************************************************************************/

/****************************************************************************/
/** \page logoff logoff - close logfile
  
   DESCRIPTION:
   This command closes the logfile.

   'logoff $p'
   
.  $p - logging is detached from open protocol file

   KEYWORDS:
   protocol, file, close, output

 * \sa logon
 *
 */
/****************************************************************************/

/****************************************************************************/
/* \page cnom cnom - write a cnom output file	

   DESCRIPTION:
   This function writes data in a format suitable for the program cnom 2.0
   written by Susanne Kroemker of the IWR, Heidelberg.
   
   'cnom ...'
   
   KEYWORDS:
   file, open, output, data
*/
/****************************************************************************/

/****************************************************************************/
/** \page   configure - configure a BVP

   DESCRIPTION:
   This command configures the BPV, calling BVP_Configure.
   The arguments depend on the domain module.

   'configure \<BVP name> ...'

   EXAMPLE:
   'configure test $d Quadrilateral $P 2 1.1 1.3'

   In the 2D standard domain module, the BVP test will be coupled with
   a quadrilateral with corners (0,0), (1,0), (1.1,1.3) and (0,1).
   
   KEYWORDS:
   boundary value problem, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page   close - close current multigrid

   DESCRIPTION:
   This command closes the current (or all) open multigrid(s),
   frees their heaps and closes all the pictures belonging to them,
   calling 'DisposeMultiGrid' and 'DisposePicture'.

   'close [$a]'

.   $a  - close all multigrids
   
   KEYWORDS:
   multigrid, close
*/
/****************************************************************************/

/****************************************************************************/
/** \page   new new - Allocate a new multigrid

   This command allocates a new multigrid, using the function CreateMultiGrid(). 
   It allocates heap and a new multigrid structure.
   The specification of the boundary value problem must be supplied by
   the user with the functions CreateProblem() and CreateDomain().
   It also creates the corner vertices and nodes of the domain.

   'new [\<mgname>] $b \<boundary value problem> $f \<format> $h \<heapsize> [$n] [$e]'

 <ul>
   <li> \<mgname\>  - the name of the multigrid (default is 'untitled-\<nb\>') </li>
   <li> $b \<boundary~value~problem\> - a boundary value problem </li>
   <li> $f \<format>     - one of the enroled formats matching with \<boundary value problem>  </li>
   <li> $n		- do not use optimized insert element function  </li>
   <li> $e		- empty grid (no vertices, no elements)  </li>
   <li> $h \<heapsize\>  - the heapsize to be allocated in byte (or use suffix 
			    "K" for kilobyte, "M" for megabyte, "G" for gigabyte)  </li>
 </ul>

   EXAMPLES:
   'new $p TestProblem $f nc $h 30000000;'
   
   'new $b TestProblem $f nc $h 30000K;'
   
   'new $b TestProblem $f nc $h 30M;'
   
   KEYWORDS:
   multigrid, new, create

   Implemented in the function NewCommand()
*/
/****************************************************************************/

/****************************************************************************/
/** \page   open - load a new multigrid from a data file	

   DESCRIPTION:
   This command loads a new multigrid, using the function 'LoadMultiGrid'. 
   Usually, this file should be generated by the 'save' command. 
   It allocates the heap and a new multigrid structure.
   The specification of the problem and the domain must be supplied by
   the user with the functions 'CreateProblem' and 'CreateDomain'.

   'open \<filename> [$t \<type>] [$m \<mg name>] [$b \<problem>] [$f \<format>] [$h \<heapsize>]'

.  \<filename>             		- the name of the multigrid file (the fule name will be composed
									to: \<filename>.ug.mg.\<type>
.  $t~\<type>					- file was saved with type: asc (default) or bin
.  \<mg~name>					- grid will be created with this name
.  $p~\<boundary~value~problem>	- a boundary value problem
									(overrides saved one)
.  $f~\<format>            		- one of the enroled formats matching with \<boundary value problem>
									(overrides saved one)
.  $h~\<heapsize>          		- the heapsize to be allocated
									(overrides saved one)
   
   KEYWORDS:
   multigrid, new, open, file

   SEE ALSO:
   'new', 'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   save - save a multigrid structure in a file

   DESCRIPTION:
   This command writes the current multigrid structure in a file. 

   'save [\<name>] [$t \<type>] [$r [0|1]] [$c \<comment>]'

.  \<name>                  - name to save with (default is the mgname)
.n								if name is ending in .scr a script file is saved which
								will generate the surface of the grid as level 0 on execution
.  $t~\<type>			   - type can be asc (default> or bin. asc and bin can be opened with
								the open command
.  $c~\<comment>            - optionally specify a comment string
.  $r~[0|1]                - 0: replace (default), 1: rename existing mg file (using modification date)
   
   KEYWORDS:
   multigrid, save, write, data, file, output

   SEE ALSO:
   'open'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   savedomain - save domain structure in a file

   DESCRIPTION:
   This command saves the domain structure of the current multigrid in a file.
   All arguments are passed to the current domain module interface function.

   'savedomain ...'
   
   SEE ALSO:
   'open'
   
   KEYWORDS:
   multigrid, domain, save, write, data, file, output
*/
/****************************************************************************/

/****************************************************************************/
/** \page average  average, freeaverage
 *
   average, freeaverage - average result of a plot proc to nodal vector

   DESCRIPTION:
   The average command takes a plot procedure (scalar or vector), allocates
   a vec data desc with nodal components and computes a conforming
   approximation of the function via a box-volume weighted average.
   The vec data desc will be given the same name as the plot procedure. The
   freeaverage command is called with same arguments and deallocates the vec data
   descs. The vec data descs are not locked!

   'average {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'
   'freeaverage {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'

   EXAMPLE:
.vb
average $nv uwTrans $s sol $nv unTrans $s sol;
savedata air3d $t xdr $n \@step $T \@TIME $a sol $b uwTrans $c unTrans;
freeaverage $nv uwTrans $s sol $nv unTrans $s sol;
.ve


   KEYWORDS:
   file, output

*/
/****************************************************************************/

/****************************************************************************/
/** \page   savedata - save multigrid data in a file

   DESCRIPTION:
   This function saves multigrid data from the current multigrid in a file.
   The multigrid has to be saved before.

   'savedata \<filename> [$t \<type>] [$n \<number>] [$T \<time>] [$r [0|1]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
.  \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
.  $t~\<type>		- type can be asc (default) or bin
.  $n~\<number>		- picture number for movie
.  $T~\<time>		- assign this time level
.  $a~\<vd name>...	- read data from this vec data descriptors
.  $r~[0|1]			- 0: replace (default), 1: rename existing data file (using modification date)
   
   KEYWORDS:
   multigrid, save, write, data, file, output

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   loaddata - load multigrid data from a file

   DESCRIPTION:
   This function loads multigrid data from a file. 

   'loaddata \<filename> [$t \<type>] [$n \<number>] [$f [$h \<heapsize>]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
.  \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
.  $t~\<type>		- type can be asc (default) or bin
.  $n~\<number>		- picture number of movie
.  $f				- open or reopen multigrid corresponding to data file
.  $h~\<heapsize>    - the heapsize to be allocated
									(overrides saved one)
.  $a~\<vd name>...	- save data to this vec data descriptors
.  $r 				- read data in current multigrid
   
   KEYWORDS:
   multigrid, load, read, file, data

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page changemc  changemc - change magic cookie of multigrid

   DESCRIPTION:
   This function changes the magic cookie of multigrid.

   'changemc \<mc>'
   
.  \<mc>				- new magic cookie
   
   KEYWORDS:
   multigrid, load, read, file, data

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   level - select another current level

   DESCRIPTION:
   This command changes another current level of the current multigrid.

   level \<level> | + | -

.  \<level> - go to level \<level>
.  +       - go to the next finer level 
.  -       - go to the next coarser level 
   
   KEYWORDS:
   multigrid, current
*/ 
/****************************************************************************/

/****************************************************************************/
/** \page   renumber - reassign the object IDs in the multigrid	


   DESCRIPTION:
   This command reassigns the object IDs in the multigrid 
   subsequently to fill the gaps, calling the function 'RenumberMultiGrid'.

   'renumber'
   
   KEYWORDS:
   multigrid, id
*/
/****************************************************************************/

/****************************************************************************/
/** \page wplist  wplist - List information on all windows and pictures

   DESCRIPTION:
   This command lists information on all windows and pictures, calling
   the functions 'ListWindowPictureHeader', 'ListPicture' and 
   'ListUGWindow'.

   'wplist'
   
   KEYWORDS:
   graphics, plot, window, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   mglist - list information on all multigrids

   DESCRIPTION:
   This command lists information on all multigrids, calling
   the functions 'ListMultiGridHeader' and 'ListMultiGrid'.

   'mglist [$s]'

.  $s - short format for less information
   
   KEYWORDS:
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   glist - list information on the current multigrid

   DESCRIPTION:
   This command lists information on the current multigrid, calling
   the function 'ListGrids'.

   'glist'
   
   KEYWORDS:
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   nlist - list information on specified nodes

   DESCRIPTION:
   This command lists information on specified nodes, calling
   the functions 'ListNodeRange' and 'ListNodeSelection'.

   'nlist {$s | $i \<fromID> [\<toID>] | $g \<global id> | $k \<key>} [$d] [$b] [$n] [$v] [$a]'

.  $s  - list info for the selected nodes
.  $i  - list info for nodes with an ID in the range \<fromID> through \<toID>
         if \<fromID> is omitted only the node with \<fromID> is listed
.  $g \<glob. id>- list info for node with global id (only for ModelP)
.  $k \<key>     - list info for node with key

.  $d  - up to version 2.3 ONLY: list also user data space
.  $b  - print additional info for boundary nodes
.  $n  - list also neighbours of each node
.  $v  - print extended info (verbose mode)
.  $a  - list all nodes
   
   KEYWORDS:
   multigrid, node, link, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page elist - list information on specified elements

   DESCRIPTION:
   This command lists information on specified elements, calling
   the functions 'ListElementRange' and 'ListElementSelection'.

   'elist $s | {$i \<fromID> [\<toID>]} [$d] [$b] [$n] [$v] [$a]'

.  $s  - list info for the selected elements
.  $i  - list info for elements with an ID in the range \<fromID> through \<toID>
         if \<fromID> is omitted only the element with \<fromID> is listed
.  $g \<glob. id>- list info for element with global id (only for ModelP)
.  $k \<key>     - list info for element with key

.  $d  - up to version 2.3 ONLY: list also user data space
.  $b  - print additional info for boundary elements
.  $n  - list also neighbours of each element
.  $v  - print extended info (verbose mode)
.  $l  - list only elements of current level
.  $a  - list all elements
   
   KEYWORDS:
   multigrid, element, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   slist - list information on all selected nodes or elements

   DESCRIPTION:
   This command lists information on selected nodes or elements, calling
   the functions 'ListNodeSelection', 'ListElementSelection'.
   (Listing of selected vectors is not implemented.)

   'slist [$d] [$b] [$n] [$v]'

.   $d  - up to version 2.3 ONLY: list also user data space
.   $b  - print additional info for boundary nodes/elements
.   $n  - list also neighbours of each node/element
.   $v  - print extended info (verbose mode)
   
   KEYWORDS:
   multigrid, selection, list, display, show

   SEE ALSO:
   'select'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   rlist - list rule records of element type for refinement

   DESCRIPTION:
   This command lists the rule record of a refinement rule for an element type,
   if an integer is given or all records for this element type, if all-option is set.

   'rlist [tri|qua|tet|hex] {[rulenumber] | [$a]}'

.  $a  - list all rules for element type
   
   KEYWORDS:
   multigrid, element, rule, type, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   vmlist vmlist - List information on specified vectors and matrices

   This command lists information on specified vectors and matrices, calling
   the functions ListVectorRange() and ListVectorSelection().

   'vmlist {$s | $i \<fromID> [\<toID>] | $g \<global id> | $k \<key>} [$t \<dt-list>] [$m] [$d] [$a] [$l \<f> \<t>] [$pos 0|1] [$obj 0|1]'

  <ul>
     <li> $s			- list info for the selected vectors  </li>
     <li> $i			- list info for vectors with an ID in the range \<fromID> through \<toID>
       			  if \<fromID> is omitted only the vector with \<fromID> is listed </li>
     <li> $g \<glob. id>- list info for vector with global id (only for ModelP) </li>
     <li> $k \<key>     - list info for vector with key </li>
     <li> $t~\<dt-list>	- list only vectors of specified data types (list of chars, no seperator) </li>

     <li> $m			- list also the associated matrix entries </li>
     <li> $d			- list also the user data </li>
     <li> $skip~0|1	- show skip flags (default 0) </li>
     <li> $a			- list all vectors </li>
     <li> $l \<f> \<t>   - process levels f \<= l \<= t </li>
     <li> $pos~0|1		- show vector positions (default 1) </li>
     <li> $obj~0|1		- show vector object related info (default 1) </li>
  </ul>   

   KEYWORDS:
   multigrid, vector, matrix, userdata, list, display, show

   Implemented in VMListCommand()
*/
/****************************************************************************/

/****************************************************************************/
/** \page convert convert - Convert a matrix into a sparse format
   
   This command converts a matrix into a sparse format,
   prints it out or svae it to a file.
   
   `convert \<mat> [$p] [$f \<name>]`
  <ul>
    <li> \<mat> - matrix symbol </li>
    <li> $p - print on shell </li>
  </ul>

  Implemented in ConvertCommand().
*/                                                                          
/****************************************************************************/

/****************************************************************************/
/** \page   in - insert an inner node and vertex

   DESCRIPTION:
   This command inserts an inner node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertInnerNode'.

   'in \<x> \<y> [\<z>]'

.  \<x>~\<y>~[\<z>] - specify as much coordinates as the space has dimensions
   
   KEYWORDS:
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   bn - insert a boundary node and vertex

   DESCRIPTION:
   This command inserts an boundary node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertBoubdaryNode'. The options are passed to the domain module function BVP_InsertBndP.

   'bn...'

   for the domain module std .... is
   '\<Id> \<s> [\<t>]'
.  \<Id>        	- insert a boundary node on the patch with \<Id>
.  \<s>~[\<t>]    - specify as much patch coordinates as the boundary has dimensions
   
   KEYWORDS:
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   gn - insertion of a boundary/inner node and vertex from global coordinates

   DESCRIPTION:
   This command inserts a boundary node if a position can be found matching the
   global point with prescribed or default accuracy. Otherwise an inner node
   is inserted at the global position.
   CAUTION: some domain module maybe does not support insertion of boundary
   nodes from global coordinates!
   
   'gn \<x> \<y> [\<z>] [$r \<res>]'
   
.  \<x>~\<y>~[\<z>]		- global coordinates 
.  $r~\<res>				- resolution

   KEYWORDS:
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   deln - delete a node and vertex

   DESCRIPTION:
   This command deletes a node and the corresponding vertex
   of the current multigrid, calling the function 'DeleteNode'.

   'deln \<Id> | $s'

.  \<Id>  - ID of the node to be deleted
.  $s    - delete ALL nodes from the selection
   
   KEYWORDS:
   multigrid, delete, remove, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   move - move a node and vertex

   DESCRIPTION:
   This command moves a node and the corresponding vertex 
   of the current multigrid to a new position, 
   calling the functions 'MoveInnerNode' and 'MoveBoundaryNode'.

   'move {\<Id> | $s} {$i \<x> \<y> [\<z>] | $b \<SegId> \<s> [\<t>]}'

.  \<Id>                - Id of the node to be moved
.  $i~\<x>~\<y>~[\<z>]    - specify as much coordinates as the space has dimensions
.  $b~\<Id>~\<s>~[\<t>]   - in the current implementation (domain module dependent)
		 				 boundary nodes can not be moved
   
   KEYWORDS:
   multigrid, move, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ie - insert an element

   DESCRIPTION:
   This command inserts an element into a multigrid with only level 0, 
   calling the function 'InsertElement'.


   'ie {\<Id>}+ | $s'

.  {\<Id>}+  - specify at least three (2d) or four (3d) corner nodes, the corresponding (unique) element will be created
.  $s 		- taking selected nodes 
   
   KEYWORDS:
   multigrid, insert, create, element, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dele - delete an element

   DESCRIPTION:
   This command deletes the specified  element of a multigrid 
   with only level 0, calling the function 'DeleteElement'.

   'dele \<Id> | $s'

.  \<Id> - ID of the element to be deleted
.  $s   - delete all elements from the selection
   
   KEYWORDS:
   multigrid, delete, remove, element, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page adapt adapt - Adapt the current multigrid

   DESCRIPTION:
   This command adapt the multigrid according to the refinement marks 
   set in the elements, calling the function 'AdaptMultiGrid'.
   If coarsen marks are set refinements are deleted.

   'adapt [$g] [$a] [$h] [$x] [$d \<vector plot proc>]'

.  no~option				- only local refinement
.  $g						- copy nonrefined regions to new level 
.  $a						- refine all elements
.  $d~\<vector~plot~proc>	- 3D only: use vector eval proc for determination of
								regular refinement direction of tetrahedra
.  $h						- refine not closed (not implemented yet)
.  $x						- use hexahedra (not implemented yet)
   
   KEYWORDS:
   multigrid, adapt, mark
*/
/****************************************************************************/


/****************************************************************************/
/** \page   fixcoarsegrid - marks the end of corse grid generation

   DESCRIPTION:
   If the coarse grid is build interactively by 'ie', this command 
   terminates this process and calls 'FixCoarseGrid'.

   SYNTAX:
   'fixcoarsegrid'
   
   KEYWORDS:
   multigrid, edit, finish
*/
/****************************************************************************/

/****************************************************************************/
/** \page   collapse - construct coarse grid from surface

   DESCRIPTION:
   The coarse grid is build from all surface elements.

   SYNTAX:
   'collapse'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   mark - mark elements with refinement type 

   DESCRIPTION:
   This command marks elements with refinement type,
   calling the function 'MarkForRefinement'.

   SYNTAX:
   'mark [$h | {[\<rule> [\<side>]] [$a | $i \<Id> | $s]} | $c] [$pos \<x y [z]>] [$x \<x>] [$y \<y>] [$z \<z>]'

.  \<rule>     - specify a refinement rule ("red" is default)
.  \<side>     - has to be specified if the corresponding rule can be applied in several orientations
.  $a         - refine all (leave) elements
.  $c		  - set all marks to no refinement
.  $i \<Id>    - refine the element with \<Id>
.  $s         - refine all elements from the current selection
.  $h         - show available rules
.  $x         - marks elements with corner[0] \< x
.  $y         - marks elements with corner[1] \< y
.  $z         - marks elements with corner[2] \< z
   
   KEYWORDS:
   multigrid, refine, adapt, rule, type, mark
   
   SEE ALSO:
   'refine'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   smooth - invoke hierarchical multigrid smoother

   DESCRIPTION:
   This command invokes hierarchical multigrid smoother, 
   calling the function 'SmoothMultiGrid'.

   SYNTAX:
   'smooth \<nIt\> [$b] [$nc]'

.    \<nIt>   - number of iterations
.    $b      - also smooth boundary nodes
.    $nc     - improvement for nonconvex domains
   
   KEYWORDS:
   multigrid
*/
/****************************************************************************/

/****************************************************************************/
/** \page   smoothgrid - resize quadrilaterals and triangles on surface levels according to 
              the element sizes on level l-1

   DESCRIPTION:
   'smoothgrid [$limit \<value>] [$reset] [$f \<value>]  [$b] [($ortho0 || $ortho1) \<val0> \<val1> ... \<valN>]'

. $limit~\<value>       - give maximum displacement of the vertices in local coordinates
                      	 of the father element (0 \< value \< 0.5, default: 0.3)
. $reset               - reset elements to default size 
. $f \<value>           - apply smoothgrid for all elements between level \<value> and current level (default: current level)
. $ortho0 \<b0> \<b1> ...- generate 'orthogonal' elements on boundaries \<b0> ... \<bN> (N\<=20)
. $ortho1 \<b0> \<b1> ...- generate 'orthogonal' elements on boundaries \<b0> ... \<bN> (N\<=20) for all sons
                         of the boundary elements on level 0
. $b                   - move only boundary mid nodes
. $spline              - additionaly smooth elements using spline functions
. $spline0             - smooth elements using spline functions only 
   
   KEYWORDS:
   multigrid, anisotropy
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ordernodes - order the nodes lexicographically according to the specified directions


   DESCRIPTION:
   This command orders the nodes according to the user provided dependencies.
   It orders the nodes of the current multigrid, calling the function
   'OrderNodesInGrid' on all levels.
   
   If specified the links are ordered in the corresponding order.

   'ordernodes ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$L]'

.   $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
.   $L		   - also order links

    EXAMPLE:
	'ordernodes rd $l2'

   Order nodes of grid level 2 lexicographically in horizontal lines from
   left to right and the lines vertical from top down.
   
   KEYWORDS:
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page   lexorderv - order the vectors lexicographically


   DESCRIPTION:
   This command orders the vectors lexicographically according to the user
   specified directions.
   It orders the vectors of the current multigrid, calling the function
   'LexOrderVectorsInGrid'.

   'lexorderv ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$m] [$w s|n] [$s \<|>]'

.   $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
.   $m		   - also order matrices
.   $w~s|n	   - order skip or nonskip vectors resp.
.   $s \<|>	   - put skip vectors at begin or end of the list resp.
   
   KEYWORDS:
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page   shellorderv - order the vectors shell by shell


   DESCRIPTION:
   This command orders the vectors of the current level of the current
   multigrid in shells starting from a seed.

   'shellorderv f | l | s'

.  f - take first vector as seed
.  l - take last vector as seed
.  s - take selected vector as seed

   KEYWORDS:
   multigrid, order, shell
*/
/****************************************************************************/

/****************************************************************************/
/** \page   orderv - order the vectors according to the user provided dependencies


   DESCRIPTION:
   This command orders the vectors according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'OrderVectors'.

   'orderv $m FFCCLL | FCFCLL $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a]'

.  $m FFCCLL | FCFCLL     - possible modes are FFCCLL or FCFCLL
.  $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
.  $o \<dep-proc options>  - ...and passes these options to it
.  $a                     - order all levels of the current multigrid

   SEE ALSO:
   'lineorderv'
   
   KEYWORDS:
   multigrid, order, downstream
*/
/****************************************************************************/

/****************************************************************************/
/** \page   revvecorder - revert the vector order


   DESCRIPTION:
   This command reverts the order of the vector list.
   
   'revvecorder [$a]'

.  $a  - reorder all levels of the current multigrid
   
   KEYWORDS:
   multigrid, order, reverse
*/
/****************************************************************************/

/****************************************************************************/
/** \page   lineorderv - order the vectors in lines according to the user provided dependencies


   DESCRIPTION:
   This command orders the vectors in lines according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'LineOrderVectors'.

   'lineorderv $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a] [$v \<level>]'

.  $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
.  $o \<dep-proc options>  - ...and passes these options to it
.  $c					  - user supplied find cut procedure
.  $a                     - order all levels of the current multigrid
.  $v~\<level>			  - verbose level

   SEE ALSO:
   'orderv'
   
   KEYWORDS:
   multigrid, order, downstream, lines
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setindex - set vector index in ascending order

   DESCRIPTION:
   'setindex' sets the vector index in ascending order.
   
   KEYWORDS:
   multigrid, vector, index
*/
/****************************************************************************/

/****************************************************************************/
/** \page   find - find (and select) a node (element) from a given position 

   DESCRIPTION:
   This function finds (and selects) a node (element) from a given position,
   where some tolerance can be specified.
   It finds a node (element) on the current level of the current multigrid, 
   using the functions
   'FindNodeFromPosition', 'FindElementFromPosition'
   'AddNodeToSelection', 'RemoveNodeFromSelection',
   'AddElementToSelection' and 'RemoveElementFromSelection'

   find \<x> \<y> \<z> {$n \<tol> | $v \<tol> | $e} [$s]

.  \<x> \<y> \<z> - specify as much coordinates as the space has dimensions
.  $n \<tol>    - find a node maching the position with tolerance \<tol>
.  $v \<tol>    - find a vector maching the position with tolerance \<tol>
.  $e          - find an element maching the position
.  $s          - add the selected node (element) to the selection buffer
               	 (if not specified the node is just listed)
   
   KEYWORDS:
   multigrid, node, element, position, find, select
*/
/****************************************************************************/

/****************************************************************************/
/** \page   select - select a node or element from a given position 

   DESCRIPTION:
   This function finds (and selects) a node (element) from a given position,
   where some tolerance can be specified.
   It adds/removes nodes/elements from the selection buffer of the current 
   multigrid, using the functions
   'FindNodeFromId', 'FindElementFromId'
   'AddNodeToSelection', 'RemoveNodeFromSelection',
   'AddElementToSelection' and 'RemoveElementFromSelection'

   'select $i | $c | $n {+|-} \<Id> | $e {+|-} \<Id>'

.  $i				- print type and number of list members
.  $c               - clear the selection buffer
.  $n~{+|-}~\<Id>    - add (+) or remove (-) the node with \<Id> to (from) the selection buffer
.  $e~{+|-}~\<Id>    - add (+) or remove (-) the element with \<Id> to (from) the selection buffer
   
   KEYWORDS:
   multigrid, select, element, node
*/
/****************************************************************************/

/****************************************************************************/
/** \page   extracon - display number of (and delete) extra connections

   DESCRIPTION:
   This command displays the number extra connections.(and deletes them if specified).
   Extra connection extend the usual sparsity pattern.

   'extracon [$d]'

.  $c - also check the connections
   
   KEYWORDS:
   multigrid, matrices, connections, pattern, delete, remove
*/
/****************************************************************************/

/****************************************************************************/
/** \page check check - check consistency of the data structure

   DESCRIPTION:
   This command checks consistency of the data structure, using
   the function 'CheckGrid'. Dependent on the options are called inside
   'CheckGrid' one or more of 'CheckGeometry' 'CheckAlgebra', 'CheckLists'
   and 'CheckInterfaces'. Default check is 'CheckGeometry'.

   'check {$a | $g | $c | $l | $i | $w}* [$n]'

.  $a - all possible checks are done
.  $g - check the geometric part of data structures (default)
.  $c - also check the algebraic part of data structures
.  $l - also check the lists of objects and counters of a grid
.  $i - also check interfaces (only parallel version)
.  $b - also check boundary value problems
.  $n - also check the numerical part of data structures
.  $w - print a list of all control words of object types with control entries to stdout
   
   KEYWORDS:
   multigrid, check, consistency, data structure, algebra, counters, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page   quality - calculate minimal and maximal angle of specified elements

   DESCRIPTION:
   This command calculates the minimal and maximal angle
   between sides of the specified elements
   and lists elements with angle \< or > given angles.
   It calls the functions 'QualityElement'.

   'quality $a | $s | {$i \<fromID> [\<toID>]} [$\< \<angle>] [$> \<angle>]'

.    $a          - check angles of all elements in the multigrid
.    $s          - check angles of the selected elements
.    $i          - check angles of elements with an ID in the range \<fromID> through \<toID>
.n                 if \<fromID> is omitted only the element with \<fromID> is listed

.    $\<~\<angle>  - print info for all elements the minangle of which is \< \<angle>
.    $>~\<angle>  - print info for all elements the maxangle of which is > \<angle>

     (angles in degree 0-360)
   
   KEYWORDS:
   multigrid, element, quality, angles, find
*/
/****************************************************************************/

/****************************************************************************/
/** \page   makegrid - generate grid
   
   2D advancing front generator:
   
   DESCRIPTION:
   This command generates the grid. First, the command bnodes must be called.
   It reads the environment variables ':gg:RelRasterSize', ':gg:h_global',	
   ':gg:searchconst', ':gg:angle', ':gg:epsi'.

   'makegrid ${W|w|K|k} [$E] [$h \<val>] [$m \<no>] [$S \<search>] [$A \<angle>] [$d \<subdom>]'

.  ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 
.  $W~resp.~w	- use the angle criterion,
.  $K~resp.~k	- use the edge criterion
.  $E 			- grid generator tries to create equilateral triangles (edgelength h)
.n 					default: isosceles triangles (height h)
.  $h~\<val> 	- mesh size 
.  $m~\<no>		- id of mesh size coefficient function 
.  $S~\<search>	- search radius (experts only)
.  $A~\<angle>	- try to avoid angle smaller than \<angle>
.  $d~\<subdom>	- restrict grid generation to subdomain with id \<subdom>

   EXAMPLE:
   'makegrid $k $h 1.0;'
   
   
   3D advancing front generator (by J. Schoeberl):
   
   DESCRIPTION:
   This command invokes the advancing front tetrahedral grid generator.
   
   'makegrid [$s] [$h \<meshsize>] [$d]'

.   $s				- smooth generated grid
.   $h \<meshsize>	- preferred meshsize (default 1.0)
.   $d				- ?
   
   KEYWORDS:
   multigrid, generate, create, mesh, net, grid, coarse, advancing front
*/
/****************************************************************************/

/****************************************************************************/
/** \page   status - show status about (parallel) multigrid
   
   DESCRIPTION:
   This command outputs some statistics about red,green yellow element 
   distribution and some loadbalacing measures for parallel.

.  ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 

   KEYWORDS:
   multigrid, loadbalancing, mesh, net, grid, adaptive refinement, estimator 
*/
/****************************************************************************/

/****************************************************************************/
/** \page   cadconvert - convert predefined CADgrid

   DESCRIPTION:
   This command converts a predefined CADgrid to an UG-multigrid.
   The complete boundary descriptions are created automatically.
   Additionally boundary conditions can be chosen from a boundary condition class library.

   'cadconvert $\<filename> $h\<heapsize>'

.  $ \<filename>  - filename = name of CADOutputfile ("*.ans", ANSYS/PREP7-Format) 
.  $f \<format>   - one of the enroled formats matching with \<problem>
.  $h \<heapsize> - the heapsize to be allocated


   EXAMPLE:
   'cadconvert $ wuerfel.ans $h 12000;'
   
   KEYWORDS:
   multigrid, generate, create, mesh, net, grid, coarse, CAD, ANSYS, PREP7
*/
/****************************************************************************/

/****************************************************************************/
/** \page grape grape - Switch to interactive grape mode

   DESCRIPTION:
   This command switches to interactive grape mode. Quitting grape returns to ug.

   'screensize'
   
   KEYWORDS:
   multigrid, graphics, GRAPE, plot
*/
/****************************************************************************/

/****************************************************************************/
/** \page   covise - enable covise interface

   DESCRIPTION:
   This command enables docking of a Covise user interface by a remote
   workstation.

.  hostname		- hostname of workstation which runs Covise

   KEYWORDS:
   multigrid, graphics, Covise, plot
*/
/****************************************************************************/

/****************************************************************************/
/** \page   screensize - print the size of the monitor screen in pixels

   DESCRIPTION:
   This command prints the size of the monitor screen in pixels.
   It prints the size in pixels of the screen (if there) on the shell
   and in the variables ':screensize:width', ':screensize:height'

   'screensize'
   
   KEYWORDS:
   screen, size, width, height
*/
/****************************************************************************/

/****************************************************************************/
/** \page   openwindow - open a new window

   DESCRIPTION:
   This command opens an ug-window on an outputdevice 
   (this will be the current window then).
   It calls the function 'CreateUGWindow'.

   'openwindow \<h> \<v> \<dh> \<dv> [$d \<output device>] [$n \<window name>]'

.  \<h>~\<v>                - the lower left corner of the plotting region in the 'standardRefSys'
.  \<dh>~\<dv>              - the width and height resp. of the plotting region of the window
.  $d~\<output~device>     - specify the name of an output device (default: screen)
.  $n~\<window~name>       - optionally you can specify the window name
.  $r~[0|1]               - if not default device: 0: replace (default), 1: rename existing graphics file (using modification date)
   
   SEE ALSO:
   'closewindow', 'openpicture', 'closepicture'
   
   KEYWORDS:
   graphics, plot, window, open, create
*/
/****************************************************************************/

/****************************************************************************/
/** \page   closewindow - close the current ug-window

   DESCRIPTION:
   This command closes one (or all) ug-window(s) 
   (including the pictures residing there, of course),
   calling the functions 'DisposeMultiGrid' and 'DisposePicture'.

   'closewindow [$n \<window name> | $a]'

.  $n~\<window~name>  - close the window with the specified name
.n      	             (default: the current window)
.  $a                - close all open windows
   
   KEYWORDS:
   graphics, plot, window, close, remove
   
   SEE ALSO:
   'openwindow', 'openpicture', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setcurrwindow - set the current window

   DESCRIPTION:
   This command makes a window the current window.	
   It calls the function 'GetUGWindow'.

   'setcurrwindow \<window name>'

.  \<window~name> - name of a window
   
   KEYWORDS:
   graphics, plot, window, current, active

   SEE ALSO:
   'openwindow'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   drawtext - draw text in a ug window

   DESCRIPTION:
   This command draws text into a ug window.

   'drawtext \<xpos> \<ypos> \<text> [$w \<window name>] [$c] [$i]'

.  \<xpos>                 - x-coordinate in pixels (origin is the lower left corner)
.  \<ypos>                 - y-coordinate in pixels (origin is the lower left corner)
.  \<text>                 - text to draw
.  $w~\<window~name>       - draw text into this window (default: current window)
.  $i                     - draw text inverse
.  $c                     - center text at \<xpos> \<ypos>
.  $s~\<size>              - text size
   
   KEYWORDS:
   graphics, plot, window, text
   
   SEE ALSO:
   'openwindow'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   openpicture - open a new picture

   DESCRIPTION:
   This command opens a picture on a window 
   (these will be the current window and picture resp. then).
   It calls the function 'CreatePicture'.

   'openpicture [$w \<window name>] [$s \<h> \<v> \<dh> \<dv>] [$n \<picture name>]'

.  $w~\<window~name>       - open a picture on this window (default: current window)
.  $s~\<h>~\<v>~\<dh>~\<dv>   - specify the location and size in the 'standardRefSys' with
							the origin located in the lower left corner of the parent window
.n                       	(default: picture size = parent window size)

.  $n~\<picture~name>      - optionally you can specify the picture name
   
   KEYWORDS:
   graphics, plot, window, picture, open, create
   
   SEE ALSO:
   'openwindow', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   openppic - open a new window with placed pictures

   DESCRIPTION:
   ???

   'openppic ??? [$R [0|1]]'

.  $R~[0|1]               - if not default device: 0: replace (default), 1: rename existing graphics file (using modification date)
   
   KEYWORDS:
   graphics, plot, window, picture, open, create
   
   SEE ALSO:
   'openwindow', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   closepicture - close a picture

   DESCRIPTION:
   This command closes one (or all) picture(s) on a window.
   It calls the function 'DeletePicture'.

   'closepicture [$a | {$w \<window name> {\<picture name> | $a}}]'

.  $w~\<window~name>        - close a picture of this window 
								(default: the current picture)
.  $a                      - close all pictures of the current window
.  {\<picture~name>~|~$a}   - close the picture with the specified name or all pictures of that window
   
   KEYWORDS:
   graphics, plot, window, picture, close, remove
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setcurrpicture - make a picture the current picture

   DESCRIPTION:
   This command makes a picture the current picture.

   'setcurrpicture \<picture name> [$w \<window name>]'

.  \<picture~name>         - name of the picture
.  $w~\<window~name>       - picture resides in this window (default: current window)
   
   KEYWORDS:
   graphics, plot, window, picture, current, active
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   picwin - move the current picture to a new window

   DESCRIPTION:
   This command moves the current picture to a newly created window. All
   settings will be kept.

   'picwin'
   
   KEYWORDS:
   graphics, plot, window, picture, move
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   clearpicture - clear current picture

   DESCRIPTION:
   This command clears current picture.
   It calls the function 'ErasePicture'.

   'clearpicture'
   
   KEYWORDS:
   graphics, plot, window, picture, clear, erase
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   picframe - toggle framing of pictures

   DESCRIPTION:
   This command toggles the framing of pictures. If on a black frame is drawn
   around each picture to show its bounds. The current picture is indicated
   by an orange frame, while the frame of a currently drawn picture turns red.
   It is recommended to switch off framing for other devices than 'screen'.
   
   SYMTAX:
   'picframe 0|1'
   
   KEYWORDS:
   graphics, plot, window, picture, frame
   
   SEE ALSO:
   'openwindow'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setview - specifies the view on the object

   DESCRIPTION:
   This command specifies or changes the observer view of the object 
   of the current picture.
   It calls the function 'SetView'.

    in 2D:~
.vb
setview [$i] [$t \<x> \<y>] [$x  \<x> \<y>]
.ve

    in 3D:~
.vb
setview [$i] [$o \<x> \<y> \<z> $t \<x> \<y> \<z>] [$x \<x> \<y> [\<z>]] [$p \< | =]
              {$C | $R | {$P \<x> \<y> \<z> $N \<x> \<y> \<z>}}
.ve

.n                         all coordinates have to be given in physical coordinates

.   $i                     - return to default settings first
.   $o \<x> \<y> \<z>         - 3D objects ONLY: specify the observer stand
.   $p \< | =               - 3D objects ONLY: choose central (\<) or parallel (=) perspective
.   $t \<x> \<y> [\<z>]       - specify the target point in the viewplane
.n	                         (NB: the viewplane is then defined to be normal to the line observer-target)

.   $x \<x> \<y> [\<z>]       - define an x-axis in the viewplane (which will be to the right in the picture)
   
   
   Some 3D plot objects allow to define a cut. It can be set and manipulated using the
   following options:~

.   $C                     - define a default cut facing to x-direction and cutting the objects midpoint
.   $P~\<x>~\<y>~\<z>         - a point on the cut plane
.   $N~\<x>~\<y>~\<z>         - the normal of the cut plane
.   $R					   - remove cut    
   
   For first definition of cut specify either C-option or both P- and N-option.
    
   KEYWORDS:
   graphics, plot, window, picture, view, cutting plane
   
   SEE ALSO:
   'vdisplay'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   vdisplay - display view of current picture

   DESCRIPTION:
   This command displays view of current picture.
   It calls the function 'DisplayViewOfDisplayedObject'.

   'vdisplay [$s]'
   
.   $s		- print settings in 'setview'-command style. This is especially
				useful after interactive zoom and pan. Pasting the output into
				a script file will reproduce the current view of the picture.
   
   KEYWORDS:
   graphics, plot, window, picture, view, cutting plane, display, show, print

   SEE ALSO:
   'setview'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   cpview - copy view settings of current picture to other ones

   DESCRIPTION:
   This command copies the view settings of current picture to all other pictures of
   the same window (default) or all windows provided that they belong to the
   same MG and they have the same dimension.

   'cpview [$a] [$c]'
.  a - set views of all pictures in all windows
.  c - set also cut (if defined for plot object)
   
   KEYWORDS:
   graphics, plot, window, picture, view, cutting plane, copy

   SEE ALSO:
   'setview', 'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   walk - let the observer walk relative to the viewRefSys

   DESCRIPTION:
   This command lets the observer walk relative to the 'viewRefSys'
   in the current picture. It calls the function 'walk'.

   'walk \<x> \<y> [\<z>]'

.   \<x>~\<y>~[\<z>] - coordinates
   
   KEYWORDS:
   graphics, plot, window, picture, view, observer, move

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   walkaround - let the observer walk on a sphere around the target point

   DESCRIPTION:
   This command lets the observer walk on a sphere around the target point.
   It calls the function 'RunAroundTargetPoint'.

   'walkaround \<viewplane angle> \<rotation angle>'

.  \<viewplane~angle>      - this angle runs in the view plane math pos from the x-axis and defines
.n                        - together with the target-observer direction a plane

.  \<rotation~angle>       - the observer will be rotated around the target point in the above plane

   (angles in degree 0 - 360)
   
   KEYWORDS:
   graphics, plot, window, picture, view, observer, move, rotate

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/


/****************************************************************************/
/** \page zoom zoom - zoom the current picture

   DESCRIPTION:
   This command zooms the current picture.
   the zoom factor is always relative to the current setting.
   It calls the function 'Zoom'.

   'zoom \<factor>'

.  \<factor>  - values \< 1 magnify picture 
   
   KEYWORDS:
   graphics, plot, window, picture, view, zoom, magnify

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   drag - drag the projection plane of the current picture

   DESCRIPTION:
   This command drags the projection plane of the current picture relative 
   to its x-axis.
   It calls the function 'DragProjectionPlane'.

   'drag \<dx> \<dy>'

.  \<dx>~\<dy>  - displacement vector 
   
   KEYWORDS:
   graphics, plot, window, picture, view, observer, pan, move

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   rotate - rotate the projection plane of the current picture

   DESCRIPTION:
   This command rotates the projection plane of the current picture around 
   the target point.
   It calls the function 'RotateProjectionPlane'.

   'rotate \<angle>'

.  \<angle>  - \<angle> runs in the view plane math pos from the x-axis
   
   KEYWORDS:
   graphics, plot, window, picture, view, observer, rotate

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   textfac - set factor to zoom text sizes

   DESCRIPTION:
   This command sets factor to zoom text sizes (default 1).
   
   SYMTAX:
   'textfac \<factor>'
   
   KEYWORDS:
   graphics, plot, window, picture, view, textsize
*/
/****************************************************************************/
/****************************************************************************/
/** \page   linefac - set factor to zoom line width

   DESCRIPTION:
   This command sets factor to zoom line width (default 1).
   
   SYMTAX:
   'linefac \<factor>'
   
   KEYWORDS:
   graphics, plot, window, picture, view, linewidth
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setplotobject - set plotting specification 

   DESCRIPTION:
   This command specifies the object which will be plotted in the current
   picture and associates the current multigrid with it (if not done yet).
   It calls the function 'SpecifyPlotObjOfViewedObject'.

   'setplotobject [\<object type name>] [$a] ... '

.    \<object~type~name>   - possible are:
.n								2 and 3D:~
.n								'Matrix'

.n								2 and 3D (with possibly different options):~
.n								'Grid',			for help see 'Grid2D', 'Grid3D'
.n								'EScalar',		for help see 'EScalar2D', 'EScalar3D'
.n								'EVector'		for help see 'EVector2D', 'EVector3D'
.n								'VecMat'		for help see 'VecMat2D', 'VecMat3D'

.n								2D only:~
.n								'line'

.    $a					  - (for 3d plot objects) moves the observer to a place outside
		                    the bounding sphere of the plot object  


   The remaining options depend on which object you specified.
   See the help for one of the abobe plotobjects for further help.

   EXAMPLE:
.vb
openpicture $n p0 $s 5 5  300 300;
setplotobject Grid $b 1 $n 0 $e 0 $c 1 $w a;
setview;
zoom 0.75;

openpicture $n p1 $s 5 310 300 300;
setplotobject EScalar $e u_sol $d 1;
setview;
zoom 0.75;

openpicture $n p2 $s 5 615 300 300;
setplotobject EScalar $e v_sol $d 1;
.ve
   
   KEYWORDS:
   graphics, plot, window, picture, view, plotobject
   
   SEE ALSO:
   Matrix, Grid, EScalar, EVector, VecMat, line
*/

/****************************************************************************/
/** \page   polist - print the specifications of the object

   DESCRIPTION:
   This command prints the specifications of the object defined in the 
   current picture. It calls the function 'DisplayObject'.

   'polist'
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, list, show, print, display
   
   SEE ALSO:
   'setplotobject'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   plot - plot an object

   DESCRIPTION:
   This command plots the object of the current picture according to 
   its specifications.
   It calls the function 'WorkOnPicture'.

   'plot [$o [0|1|2]] [$b [\<factor>]] [$a]'

.   $o	- ordering strategy (only used for 3D hidden surface)
.   $b  - use bullet plotter
.   $a  - plot all pictures in all windows
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, draw
*/
/****************************************************************************/

/****************************************************************************/
/** \page   findrange - find the range of values to be plotted

   DESCRIPTION:
   This command computes the range of  values to be plotted for the object 
   in the current picture. The result will be printed and 
   stored into :findrange:min and :findrange:max.
   It calls the function 'WorkOnPicture'.

   'findrange [$z \<zoom factor>] [$s] [$p]'

.  $z~\<zoom factor>       - zoom the range by this factor
.  $s                     - symmetrize the range (min=max)
.  $p                     - store range in plot object
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, range, values

   SEE ALSO:
   'plot'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setcurrmg - change the current multigrid

   DESCRIPTION:
   This command sets the current multigrid.

   'setcurrmg \<mgname>'

.  \<mgname>  - name of the open multigrid which will be made the current one
   
   KEYWORDS:
   multigrid, current, active

   SEE ALSO:
   'open', 'new'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   updateDoc - reset the windows and pictures of the current multigrid to invalid

   DESCRIPTION:
   This command runs 'InvalidatePicturesOfMG' and 
   'InvalidateUgWindowsOfMG'.
   If the refresh state is on, the pictures will be replotted.

   'updateDoc'
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, invalidate
*/
/****************************************************************************/

/****************************************************************************/
/** \page   rotmode - rotation mode for 3D pictures (arrow tool)

   DESCRIPTION:
   This command toggles the rotation mode for 3D plot objects between
   Euler angle mode and Virtual Sphere. Just try both to find the most
   convenient one.

   'rotmode E[uler] | S[phere]'
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, arrowtool
   
   SEE ALSO:
   arrowtool
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setpalette - switch palette of default device

   DESCRIPTION:
   This command switches the palette of the default device.

   'setpalette c|bw|g [$d \<device>]'
.  $d~\<device>     - specify the name of an output device (default: screen)
   
   KEYWORDS:
   graphics, plot, window, picture, device
*/
/****************************************************************************/

/****************************************************************************/
/** \page   clear - assign a value to a symbolic vector

   DESCRIPTION:
   This function sets the values of a grid function specified by a vec data descriptor.
   The data descriptor is created if it does not exist yet.
   It clears or assigns a constant value.

   'clear \<symbol name> [$a] [$u] [$v \<value>] [$x] [$y] [$z]'

.  $a         - from level 0 through current level (default: current level only)
.  $s         - do not change skip (Dirichlet) values
.  $v~\<value> - assign this value (instead of 0.0)
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, clear, set

   SEE ALSO:
   'cv', 'cm', 'copy'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   makevdsub - make a sub descriptor for a vector descriptor

   DESCRIPTION:
   This function makes a sub descriptor for a vector descriptor.

   'makevdsub \<vd> $sub \<vt> \<sub>'

.  \<vd>				- existing descriptor
.  $sub~\<vt>~\<sub>	- template and name of sub of this template
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, descriptor
*/
/****************************************************************************/

/****************************************************************************/
/** \page   mflops - floating point speed measuring

   DESCRIPTION:
   This function tests the performance of the UG specific blas routines.

   'mflops $x \<vec> [$y \<tmp>] [$A \<mat>] [$l \<loop>]'

.  $x~\<vec>   - vector
.  $y~\<tmp>   - second vector
.  $A~\<mat>   - matrix
.  $l~\<loop>  - loop number

   REMARK:
   Due to the inaccuracy of the most UNIX clock systems take a huge loop number
   to get an good average.
*/
/****************************************************************************/

/****************************************************************************/
/** \page   rand - assign a value to a symbolic vector

   DESCRIPTION:
   This function sets the random values of a grid function specified by a vec data descriptor.
   The data descriptor is created if it does not exist yet.

   'rand \<symbol name> [$a] [$s] [$f \<value>] [$t \<value>]'

.  $a         - from level 0 through current level (default: current level only)
.  $s         - set skip (Dirichlet) values to zero, default is no skip
.  $f~\<value> - low bound of random range, default is 0
.  $t~\<value> - upper bound of random range, default is 1
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, clear, set

   SEE ALSO:
   'cv', 'cm', 'copy'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   copy - copy from one vector symbol to another one

   DESCRIPTION:
   This command copies from one vector symbol to another one.
   The data descriptor is created if it does not exist yet.

   'copy $f \<from vec sym> $t \<to vec sym> [$a]'

.  $f~\<from~vec~sym>      - from vector symbol
.  $t~\<from~vec~sym>      - to vector symbol
.  $a                     - all levels

   EXAMPLE:
   'copy $f sol $t old;'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear'
*/
/****************************************************************************/

/****************************************************************************/
/** \page add add - Add two vector symbols

   DESCRIPTION:
   This command adds two vectors (x = x + y).

   'add $x \<vec sym> $y \<vec sym> [$a]'

.  $x~\<vec~sym>      - vector symbol 
.  $y~\<vec~sym>      - vector symbol
.  $a                - all levels

   EXAMPLE:
   'add $x sol $y old;'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear', 'sub'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   sub - subtract two vector symbols

   DESCRIPTION:
   This command subtracts two vectors (x = x - y).

   'sub $x \<vec sym> $y \<vec sym> [$a]'

.  $x~\<vec~sym>      - vector symbol 
.  $y~\<vec~sym>      - vector symbol
.  $a                - all levels

   EXAMPLE:
   'sub $x sol $y old;'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear', 'add'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   homotopy - convex combination of two vector symbols

   DESCRIPTION:

   This command sets 'x := (1-v)*x + v*y'.

   'homotopy $v \<val> $x \<x vec sym> $y \<y vec sym> [$a]'

.  $v~\<val>               - value
.  $x~\<x~vec~sym>         - vector symbol
.  $y~\<y~vec~sym>         - vector symbol
.  $a                     - all levels

   EXAMPLE:
   'homotopy $v 0.5 $x sol $y old;'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, weighted sum, interpolate

   SEE ALSO:
   'cv', 'cm', 'copy', 'clear'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   interpolate - (standard) interpolate a vector symbol to new vectors on the current level

   DESCRIPTION:
   The data descriptor is created if it does not exist yet.

   'interpolate \<vec sym>'

. \<vec~sym>  - vector symbol to be interpolated

   EXAMPLE:
   'interpolate sol;'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, interpolate, prolongate

   SEE ALSO:
   'clear', 'cv'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   reinit - reinitialize a boundary value problem

   DESCRIPTION:
   This command reinitializes the problem with the user defined reinit of the 
   problem. All arguments are passed to the reinit function

   'reinit [$b \<boundary value problem>] ...'

.  $b~\<boundary~value~problem> - problem to initialize
							     (default is the problem of the current mg)
   
   KEYWORDS:
   multigrid, boundary value problem, configure, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page   delformat - delete a previously enroled format

   DESCRIPTION:
   This command deletes a previously enroled format.

   'delformat \<format name>'

.  \<format~name> - name of the fomat
   
   KEYWORDS:
   storage, format
*/
/****************************************************************************/

/****************************************************************************/
/** \page	setpf -  command to change current settings of the data
					listing functions of a format
	
	SYNTAX:
	setpf \<format_name> [$V{0 | {+|-} {\<vecsym_name>}+}]+ [$M{0 | {+|-} {\<matsym_name>}+}]+
	
	DESCRIPTION:
	For a format previously enroled by use of the 'newformat' command the 'setpf'
	command specifies the symbols that are displayed when 'vmlist' is called with
	'$d' (list vector data) or '$d $m' (list vector and matrix data).
	'0' clears the list of symbols, '+' adds further symbols, and '-'
	removes symbols from that list.
	
	EXAMPLE:
.vb
	newformat ns $V n3: vt 5 $M n3xn3: mt 2;
	
	open grid $f ns $h 1000000;
	
	clear sol;		# creates sol vec data desc from vt template
	
	# suppose rhs, MAT, LU data descriptors have been created by the initialization of
	# the discretization and solver
	
	# print sol, rhs vector data and MAT, LU matrix data of vector with index 10
	setpf ns $V0 $M0 $V+ sol rhs $M+ MAT LU;
	vmlist $i 10 $m $d;
	
	# print sol vector data and MAT matrix data of vector with index 12
	setpf ns $V- rhs $M- LU;
	vmlist $i 12 $m $d;
.ve
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, print, show, display
	
	SEE ALSO:
	'showpf'
*/
/****************************************************************************/

/****************************************************************************/
/** \page	showpf - command to display current settings of data
					listing functions
	
	DESCRIPTION:
	This command shows which user data will bbe listed by vml $d $m...
	
	'showpf'
   
    KEYWORDS:
    multigrid, numerics, userdata, vecdata, matdata, print, show, display
	
	SEE ALSO:
	setpf
*/
/****************************************************************************/

/****************************************************************************/
/** \page   npexecute npexecute - execute a NumProc
 *
 * This command executes a NumProc.
 * It calls the function 'ExecuteNumProc'.

   'npexecute [\<num proc name>] \<argument list to be passed>'

.  \<num~proc~name> - name of an existing NumProc
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, numproc, execute

   * \sa numerics, NUM_PROC
*/
/****************************************************************************/

/****************************************************************************/
/** \page   npdisplay - display a NumProc

   DESCRIPTION:
   This command displays a NumProc.
   It calls the function 'DisplayNumProc'.

   'npdisplay [\<num proc name>] [$c [\<class>] | $a]'

.  \<num~proc~name> - name of an existing NumProc (default is the current NumProc)
.  $c~[\<class>]    - list all num procs of \<class> or list classes if \<class> omitted
.  $a              - list all num procs
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, numproc, display, show, print

   SEE ALSO:
   'npcreate', 'npexecute'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   npcreate - creating a NumProc

   DESCRIPTION:
   This command creates a NumProc for the current multigrid with a given constructor.
   It calls the function 'CreateNumProc'.

   'npcreate \<num proc name> $c \<constructor>'

.  \<num~proc~name> 		- name of the new NumProc
.  $c~\<num~proc~type>	- name of an existing constructor
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, numproc, create, install

   SEE ALSO:
   'npdisplay', 'npexecute', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   npinit - inizialize a NumProc

   DESCRIPTION:
   This command inizializes a NumProc.
   It calls the function 'SetNumProc'.

   'npinit \<argument list to be passed>'
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, numproc, initialize, parameters, configure

   SEE ALSO:
   'npcreate', 'npdisplay', 'numerics', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   scnp - make a NumProc the current NumProc

   DESCRIPTION:
   This command makes a NumProc the current NumProc.
   It sets current num proc.
   It calls the function 'GetNumProcFromName'.

   'scnp \<num proc name>'

. \<num~proc~name> - name of an existing NumProc
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, numproc, active, current

   SEE ALSO:
   'npcreate', 'npdisplay', 'numerics', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   createvector - construct vector descriptors

   DESCRIPTION:
   This function creates vector descriptors using templates defined
   in the format.

   'createvector \<v1> [\<v2> ...] [$t \<template>] [$m \<name>]'

.  v1 		- vector name
.  template - template name (default is the first vector template)
.  name 	- multigrid name (default is the current multigrid)
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, create

   SEE ALS0:
   'newformat', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   creatematrix - construct matrix

   DESCRIPTION:
   This function creates matrix descriptors using templates defined
   in the format.

   'creatematrix \<M1> [\<M2> ...] [$t \<template>] [$m \<name>]'

.  M1 		- matrix name
.  template - template name (default is the first matrix template)
.  name 	- multigrid name (default is the current multigrid)
   
   KEYWORDS:
   multigrid, numerics, userdata, matdata, create

   SEE ALS0:
   'newformat', 'createvector'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   freematrix - free matrix

   DESCRIPTION:
   This function frees matrix descriptors.

   'freematrix \<M1> [\<M2> ...] [$m \<name>]'

.  M1 		- matrix name
.  name 	- multigrid name (default is the current multigrid)
   
   KEYWORDS:
   multigrid, numerics, userdata, matdata, create

   SEE ALS0:
   'newformat', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   symlist - list contents of vector and matrix symbols

   DESCRIPTION:
   This command lists the contents of vector and matrix data descriptors of the
   current multigrid

   'symlist {$V [\<vd>] | $M [\<md>]  [$alloc] [$scal]}'

	Specify either option V or M with or without:~
.  \<vd> - name of a vec data desc, if omitted ALL vec data descs of the current
			multigrid are listed
.  \<md> - name of a mat data desc, if omitted ALL mat data descs of the current
			multigrid are listed
			
.  \<alloc> - is descriptor allocated and/or locked
.  \<scal> - is descriptor scalar or not
   
   KEYWORDS:
   multigrid, numerics, userdata, vecdata, matdata, list, show, display, print

   SEE ALSO:
   'newformat', 'createvector', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   setkey - associate a command key with a ug command 

   DESCRIPTION:
   This command associates a command key with a ug command.
   It calls the function 'SetCmdKey'.

   'setkey $\<command char> [$c \<comment text>] [$-] $"\<command sequence>"*'

.  $k~\<command~char>      - specifiy a single character which will be the command key
.  $c~\<coment~text>       - will be displayed by keylist rather than command(s)
.  $-                     - keylist prints a hor bar befor this key
.  $"\<command~sequence>"  - give an arbitrary sequence of statements which is to be executed when the command key is pressed

   EXAMPLE:
   'setkey $r $"mark $a" $"refine";'

   Typing \<alt> and then 'r' refines all elements on a UNIX system,
   \<cmd>+\<r> on a Macintosh.
   
   NOTICE:
   When the command sequence contains a \@ character, the following token is interpreted
   as string variable and expanded as usual instantaneously when the command key is created.
   If the sequence contains a ? instead of the \@, the string variable will be expanded with its current
   contents at execution time of the command sequence.
   
   The special character ? is limited however to the 'setkey' command.
   
   KEYWORDS:
   shortcut, hotkey, create, define

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   delkey - delete an existing command key

   DESCRIPTION:
   This command deletes an existing command key.
   It calls the function 'DelCmdKey'.

   'delkey $all | $\<command char>'

.  $all                   - delete all command keys allocated before
.  $\<command~char>        - delete only the command key associated with \<command char>
   
   KEYWORDS:
   shortcut, hotkey, remove, undefine

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   keylist - list all existing command keys

   DESCRIPTION:
   This command lists all existing command keys.
   It calls the function 'ListCmdKeys'.

   'keylist [$l]'

.  $l - show commands and comment (iff)
   
   KEYWORDS:
   shortcut, hotkey, list, show, display, print

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   refreshon - sets the refresh state on

   DESCRIPTION:
   This command sets the refresh state on: The pictures on the screen 
   device will be updated instantaneously.

   'refreshon [$b [factor]]'
   
.  $b - use bullet plotter for refresh

   KEYWORDS:
   graphics, plot, window, picture, plotobject, invalid, update

    SEE ALSO:
	'refreshoff', 'InvalidatePicturesOfMG', 'InvalidateUgWindowsOfMG'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   refreshoff - sets the refresh state off

   DESCRIPTION:
   This command sets the refresh state off.

   'refreshoff'
   
   KEYWORDS:
   graphics, plot, window, picture, plotobject, invalid, update

   SEE ALSO:
   'refreshon'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   resetCEstat - reset counters of control entry usage

   DESCRIPTION:
   This command resets the counters of control entry usage.

   'resetCEstat'
   
   KEYWORDS:
   control entries

   SEE ALSO:
   'printCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   printCEstat - print counters of control entry usage

   DESCRIPTION:
   This command prints the counters of control entry usage.

   'printCEstat'
   
   KEYWORDS:
   control entries

   SEE ALSO:
   'resetCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   heapstat - list information about heap of current multigrid

   DESCRIPTION:
   This command lists information on the heap of the current multigrid, calling
   the function 'HeapStat'.

   'heapstat'
   
   KEYWORDS:
   heap, multigrid, freelists 
*/
/****************************************************************************/

/****************************************************************************/
/** \page   getheapused - put size of used heap of current multigrid into environment variabl :HEAPUSED

   DESCRIPTION:
   This command gets the size of used heap of the current multigrid and puts
   the result in the environment variable :HEAPUSED.

   'getheapused'
   
   KEYWORDS:
   heap, multigrid, freelists, memory, used, get, free 
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   lb - a simple load balancing front end to chaco
   			based on the clustering technique

   DESCRIPTION:
   The lb command performs load balancing.  If not run on a parallel machine
   it will do nothing.  If run on a parallel machine it will try to use Chaco,
   provided the CHACO option for ug was turned on.  If Chaco is not available
   a simple RCB load balancing will be employed.  In the latter case some of
   the optional arguments will be ignored.
   
   'lb  [\<strategy>] [$c \<minlevel>] [$d \<depth>] [$f \<maxlevel>] [$e \<minelem>]'

.  \<strategy>		- load balancing strategy 
.  $c \<minlevel>	- start load balancing at this level
.  $d \<depth>		- depth of clusters
.  $f \<maxlevel>	- no load balancing above this level
.  $e \<minelem>		- minimal number of elements on each processor

   KEYWORDS:
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page lbs lbs - simple or special load balancing functionality

   DESCRIPTION:
   ...
   
   'lbs ...'

   KEYWORDS:
   parallel, processors, check, load balancing
*/
/****************************************************************************/

/****************************************************************************/
/** \page context  context - manipulate current processor context

   DESCRIPTION:
   This command adds/removes processors from the current context.
   
   'context <processor> | $a | $e'
   
.  \<processor>		- processor id
.  $a				- add all processors
.  $e				- remove all processors (empty context)
   
   KEYWORDS:
   parallel, processors, display, show, print, DDD, configure
*/
/****************************************************************************/

/****************************************************************************/
/** \page pstat  pstat - gives information about parallel data structures

   DESCRIPTION:
   ...
   
   'pstat ...'

   first argument will be passed to DDD
   
   KEYWORDS:
   parallel, processors, display, show, print, DDD, status, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   dlb_eval - gives information current load balancing situation

   DESCRIPTION:
   information on the current load balancing situation of MultiGrid
   
   'dlb_eval $v \<0-n>'

   
   KEYWORDS:
   load balancing, status, load, interfaces, partition graph
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   lb4 - load balancer using different (high level) strategies
   			based on the clustering technique

   DESCRIPTION:
   ...
   
   'lb4 ...'
   
   KEYWORDS:
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page   debug - set or display debug level for ug kernel subsystem

   DESCRIPTION:
   This command sets the debug level for a ug kernel subsystem.
   
   'debug $\<module> [$\<level>]'

.   $\<module>	- module can be one of
.n					init
.n					dddif
.n					dev
.n					dom
.n					gm
.n					graph
.n					low
.n					machines
.n					np
.n					ui
.n					time
.n                  pclib
.n                  appl
.   $\<level>	- assign this level (if omitted display current level for the
					specified module)
   
   KEYWORDS:
   debug, configure, set, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   trace - trace a module

   DESCRIPTION:
   This command sets the trace level of modules (blas only up to now).

   'trace [$blas \<n>]'
.   $blas~\<n>	- 0: off, 1: show parameters (default),
					2: parameters and vector contents (blas level 1)
   
   KEYWORDS:
   debug, trace, ugblas
*/
/****************************************************************************/

/****************************************************************************/
/** \page   reperr - prints the error stack

   DESCRIPTION:
   This command prints the error stack which is created when functios use
   the REP_ERR_RETURN macro. The stack is cleared before each call of a ug-command.
   
   File and line of the returning functions are printed.

   'reperr'
   
   KEYWORDS:
   debug, stack, error, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   timing - prints time history

   DESCRIPTION:
   File, line and times are printed.

   'timing'
   
   KEYWORDS:
   debug
*/
/****************************************************************************/

/****************************************************************************/
/** \page   showconfig - show the main configuration settings of this ug-program

   DESCRIPTION:
   This command shows the main configuration options having been active
   when this ug was compiled.
   
   'showconfig'
   
   KEYWORDS:
   debug, check, configure, show, display, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   array - family of ug-commands to handle n-dimensional arrays of doubles

   DESCRIPTION:
   Each array is a struct in the directory '/Array'. Besides some
   administrational information it contains an ordinary, n-dimensional array
   of doubles as a 'double[n_1][n_2]...[n_k]' definition in C would allocate.
   The maximum number 'k' of dimensions is restricted to 'AR_NVAR_MAX'.

   The provided commands to work with array are the following. The name of
   each command conists of the 2 first letters of its action (e.g. 'sa' for
   'save') and the postfix 'ar' for 'array'.

   CONSTRUCTION and DESTRUCTION:
.  crar~$n~\<name>~{$n_i}+ 			 - create array of specified size
.  dear~$n~\<name> 		  			 - delete array

   ACCESS to values:
.  wrar~$n~\<name>~{$n_i}+~$v~\<value> - write array[n_1][n_2]...[n_k] := \<value>
.  rear~$n~\<name>~{$n_i}+			 - read array[n_1][n_2]...[n_k] to ':ARRAY_VALUE'
.  clar~$n~\<name>					 - clear array, all entries := 0.0

   FILEOPERATIONS:
.  saar~$n~\<name>					 - save array to file '\<name>.array'
.  loar~$n~\<name>					 - load array from file '\<name>.array'

   EXAMPLE:
   Use the array commands to realize a consecutively numbering of logfiles 
   across several runs of the programm.
.vb
       loar $n filenumber;			# try to load a previously stored array
       if ( :cmdstatus != "0" )
       {                            # no previous array -> the first run
       	fnr = -1;					# init the number
       	crar $n filenumber $1;      # create an array for only one component
       }
       else
       {                            # previous array is loaded
       	rear $n filenumber $0;      # put the filenumber into :ARRAY_VALUE
       	fnr = :ARRAY_VALUE;         # get this number
       }
       fnr = fnr + 1;                  # calculate the next number
       wrar $n filenumber $0 $v \@fnr;  # write this number (back) to the array
       saar $n filenumber;             # save the array (back) to file
       dear $n filenumber;             # delete array since not longer needed 
       set logname log\@fnr;

       logon \@logname;
.ve
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed
   
   SEE ALSO:
   'crar', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   crar - create a new array structure

   DESCRIPTION:
   Allocate a new array structure in the directory '/Array' and
   allocate the data field of the specified size with the function
   'CreateArray'. The data field is the same as a 'double[n_1][n_2]...[n_k]'
   definition in C would allocate. The maximum number 'k' of dimensions
   is 'AR_NVAR_MAX'. Give the 'n_i' only for the dimensions 'i' you need.

   'crar $n \<name> {$\<n_i>}+'

.  \<name> - name of the array structure
.  \<n_i>  - extension in the i.th dimension, 1 \<= i \<= 'AR_NVAR_MAX'

   EXAMPLE:
.vb
   # Create a 3x7 (2-dimensional) array
   crar $n example_array $3$7;
.ve
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dear - delete an existing array structure

   DESCRIPTION:
   Delete the already existing array. The entry in the directory '/Array'
   is removed and the data field of the array is freed.

   'dear $n \<name>'

.  \<name> - name of the array structure
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   saar - save an array to file

   DESCRIPTION:
   Store the content of the array into a file with name '\<array name>.array'.
   The 'arraypathes' entry in the 'defaults' file is considered.

   'saar $n \<name>'

.  \<name> - name of the array structure

   REMARK:
   The file is written in the binary mode, thus be careful when exchanging
   the computer architecture.
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   loar - load and allocates an array from file

   DESCRIPTION:
   Load the content of the array from the file with name '\<array name>.array'.
   The 'arraypathes' entry in the 'defaults' file is considered. A new array
   structure with the given name is allocated in the directory '/Array'.

   'loar $n \<name>'

.  \<name> - name of the array structure

   REMARK:
   The file is written in the binary mode, thus be careful when exchanging
   the computer architecture.
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page wrar wrar - write value into one single entry of the array

   DESCRIPTION:
   Write the given double-value into the specified entry of the array.

   'wrar $n \<name> {$\<n_i>}+ $v \<value>'

.  \<name>  - name of the array structure
.  \<n_i>   - i.th coordinate of the entry, 0 \<= n_i \< allocated extension
.  \<value> - double value to be stored

   REMARK:
   Like in C if the array is allocated with 'n' components in a dimension,
   the valid indices for writing are 0,..,'n'-1. An index outside this
   range causes an error. Give coordinate for all allocated dimensions.

   EXAMPLE:
.vb
   # perform array[2][5] := 1.0
   wrar $n example_array $2$5 $v 1.0;
.ve
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   rear - read the value from one single entry of the array

   DESCRIPTION:
   Read the the specified value from the array and store it in the
   environment variable ':ARRAY_VALUE'.

   'rear $n \<name> {$\<n_i>}+'

.  \<name>  - name of the array structure
.  \<n_i>   - i.th coordinate of the entry, 0 \<= n_i \< allocated extension

   REMARK:
   Like in C if the array is allocated with 'n' components in a dimension,
   the valid indices for reading are 0,..,'n'-1. An index outside this
   range causes an error. Give coordinate for all allocated dimensions.

   EXAMPLE:
.vb
   # retrieve array[2][5]
   rear $n example_array $2$5;
   # and display the value
   set :ARRAY_VALUE;
.ve
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   clar - set all entries of the array to 0.0

   DESCRIPTION:
   Set all entries of the data field contained in the array structure to 0.0.

   'clar $n \<name>'

.  \<name> - name of the array structure
   
   KEYWORDS:
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dumpalg - dumps the surface algebra to the interface

   DESCRIPTION:
   Dumps the surface algebra

   'dumpalg \<name\>'

.  \<name\> - file name
   
   KEYWORDS:
   data, io

*/
/****************************************************************************/