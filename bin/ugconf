#!/bin/sh
if test "$1" = "-help"
then
	echo "usage: $0 [-o] [<conf>]";
	echo "purpose: copy a config file to ug.conf";
	echo "Options are";
	echo " -o:     use object database. trade time against diskspace.";
	echo " <conf>: 2 (set DIM = 2)";
	echo "         3 (set DIM = 3)";
	echo "         NETGEN (set NETGEN = ON)";
	echo "         GRAPE (set GRAPE = ON)";
	echo "         NONETGEN (set NETGEN = OFF)";
	echo "         NOGRAPE (set GRAPE = OFF)";
	echo "         RIF (set REMOTE_IF = ON)";
	echo "         NORIF (set REMOTE_IF = OFF)";
	echo "         HP (set ARCH = HP)";
	echo "         HPUX9 (set ARCH = HPUX9)";
	echo "         DEC (set ARCH = DEC)";
	echo "         PARAGON (set ARCH = PARAGON)";
	echo "         PC (set ARCH = PC)";
	echo "         POWERGC (set ARCH = POWERGC)";
	echo "         CC (set ARCH = CC)";
	echo "         AIX (set ARCH = AIX)";
	echo "         AIXGCC (set ARCH = AIXGCC)";
	echo "         SOLARIS (set ARCH = SOLARIS)";
	echo "         SOLARISGCC (set ARCH = SOLARISGCC)";
	echo "         SUN4GCC (set ARCH = SUN4GCC)";
	echo "         SP2 (set ARCH = SP2)";
	echo "         T3D (set ARCH = T3D)";
	echo "         T3E (set ARCH = T3E)";
	echo "         NECSX4 (set ARCH = NECSX4)";
	echo "         SEQ (set MODEL = SEQ)";
	echo "         MPI (set MODEL = MPI)";
	echo "         NX (set MODEL = NX)";
	echo "         NXLIB (set MODEL = NXLIB)";
	echo "         PARIX (set MODEL = PARIX)";
	echo "         PVM (set MODEL = PVM)";
	echo "         SHMEM (set MODEL = SHMEM)";
	echo "         SHMEMT3D (set MODEL = SHMEMT3D)";
	echo "         STD_DOMAIN (set DOM_MODUL = STD_DOMAIN)";
	echo "         GSF_DOMAIN (set DOM_MODUL = GSF_DOMAIN)";
	echo "         DEBUG (set DEBUG_MODE = ON)";
	echo "         NODEBUG (set DEBUG_MODE = OFF)";
	echo "         CHACO (set CHACO = ON)";
	echo "         NOCHACO (set CHACO = OFF)";
	echo "         CAD (set CAD = ON)";
	echo "         NOCAD (set CAD = OFF)";
	exit 1;
fi

if test "x$UGROOT" = "x"
then
	echo "$0: to use $0 set shell environment variable UGROOT!";
	exit 1;
fi


##################################################################

# switch AWK depending on unix version
case `/bin/uname` in
        HP-UX)
                AWK=awk
                ;;
        *)
                AWK=nawk
                ;;
esac;


# compression/decompression

#PACKER=gzip
#UNPACKER=gunzip --stdout
#PACKSUFFIX=gz

PACKER=compress
UNPACKER=zcat
PACKSUFFIX=Z


##################################################################
# subroutines
##################################################################


grep_valid_entries()
{
	egrep '^[ ]*ARCH|^[ ]*MODEL |^[ ]*DIM|^[ ]*GRAPE |^[ ]*NETGEN|^[ ]*REMOTE_IF|^[ ]*DOM_MODULE|^[ ]*DEBUG_MODE|^[ ]*CHACO|^[ ]*CAD' $1;
}


build_objdb_name()
{
	grep_valid_entries $1 | $AWK '{printf("%s.",$3);} END { print "obj"}' -
}


objdb_show_contents()
{
	OBJDIR=$UGROOT/obj

	# test whether object database exists
	if test ! -d $OBJDIR
	then
		echo "no object database."
	else
		cd $OBJDIR
		echo "contents of your ug object database (size in blocks):"
		du 
	fi
}


objdb_save_current()
{
	OBJDIR=$UGROOT/obj

	# create object database, if none
	if test ! -d $OBJDIR
	then
		echo "creating ug object database " $OBJDIR
		mkdir $OBJDIR
	fi

	echo "saving current objects into object database"

	# test whether objdb for old ug.conf already exists
	if test -d $OBJDIR/`build_objdb_name $UGROOT/ug.conf`
	then
		echo "  removing old object tree " `build_objdb_name $UGROOT/ug.conf`
		cat $OBJDIR/`build_objdb_name $UGROOT/ug.conf`/date
		rm -r $OBJDIR/`build_objdb_name $UGROOT/ug.conf`
	fi

	# save object tree
	cd $UGROOT

	# create list of all objects
	find . -name "*.o" -print >$OBJDIR/obj_list

	# create directory in database and copy current ug.conf there
	mkdir $OBJDIR/`build_objdb_name $UGROOT/ug.conf`
	cp ug.conf $OBJDIR/`build_objdb_name $UGROOT/ug.conf`
	echo "   (version from " `date` ")" \
		> $OBJDIR/`build_objdb_name $UGROOT/ug.conf`/date

	# collect objects into compressed tar file.
	echo "  this may take a while ..."
	tar cf - `cat $OBJDIR/obj_list` | \
		$PACKER >$OBJDIR/`build_objdb_name $UGROOT/ug.conf`/obj.tar.$PACKSUFFIX
	echo "  stored " `build_objdb_name $UGROOT/ug.conf` " in object database."
}


objdb_restore_new()
{
	OBJDIR=$UGROOT/obj

	# test if there is a database for new ug.conf
	if test -d $OBJDIR/`build_objdb_name $UGROOT/ug.conf`
	then
		echo "restoring old object tree from object database"

		# remove all existing obj-files
		cd $UGROOT
		find . -name '*.o' -exec rm {} \;

		# restore object tree
		cd $UGROOT
		$UNPACKER $OBJDIR/`build_objdb_name $UGROOT/ug.conf`/obj.tar.$PACKSUFFIX  | \
			tar xf -
		echo "  restored object tree " `build_objdb_name $UGROOT/ug.conf`
		cat $OBJDIR/`build_objdb_name $UGROOT/ug.conf`/date

	else
		echo "database contains no object tree " `build_objdb_name $UGROOT/ug.conf`
		echo "  no restore this time, so we keep old object files."
		echo "  use ugbcheck to check integrity of your executable."
	fi
}



# edit_ugconf (ug.conf-filename, cmdline-argument)
edit_ugconf()
{
	case $2 in
	2)
		sed 's/^DIM.*$/DIM = 2/' $1 > $1.tmp
		;;
	3)
		sed 's/^DIM.*$/DIM = 3/' $1 > $1.tmp
		;;
	NETGEN)
		sed 's/^NETGEN.*$/NETGEN = ON/' $1 > $1.tmp
		mv $1.tmp $1
		sed 's/^DIM.*$/DIM = 3/' $1 > $1.tmp
		;;
	GRAPE)
		sed 's/^GRAPE.*$/GRAPE = ON/' $1 > $1.tmp
		;;
	NONETGEN)
		sed 's/^NETGEN.*$/NETGEN = OFF/' $1 > $1.tmp
		;;
	NOGRAPE)
		sed 's/^GRAPE.*$/GRAPE = OFF/' $1 > $1.tmp
		;;
	RIF)
		sed 's/^REMOTE_IF.*$/REMOTE_IF = ON/' $1 > $1.tmp
		;;
	NORIF)
		sed 's/^REMOTE_IF.*$/REMOTE_IF = OFF/' $1 > $1.tmp
		;;
	HP)
		sed 's/^ARCH.*$/ARCH = HP/' $1 > $1.tmp
		;;
	HPUX9)
		sed 's/^ARCH.*$/ARCH = HPUX9/' $1 > $1.tmp
		;;
	DEC)
		sed 's/^ARCH.*$/ARCH = DEC/' $1 > $1.tmp
		;;
	SGI)
		sed 's/^ARCH.*$/ARCH = SGI/' $1 > $1.tmp
		;;
	AIX)
		sed 's/^ARCH.*$/ARCH = AIX/' $1 > $1.tmp
		;;
	SP2)
		sed 's/^ARCH.*$/ARCH = SP2/' $1 > $1.tmp
		;;
	AIXGCC)
		sed 's/^ARCH.*$/ARCH = AIXGCC/' $1 > $1.tmp
		;;
	PARAGON)
		sed 's/^ARCH.*$/ARCH = PARAGON/' $1 > $1.tmp
		;;
	PC)
		sed 's/^ARCH.*$/ARCH = PC/' $1 > $1.tmp
		;;
	POWERGC)
		sed 's/^ARCH.*$/ARCH = POWERGC/' $1 > $1.tmp
		;;
	CC)
		sed 's/^ARCH.*$/ARCH = CC/' $1 > $1.tmp
		;;
	SOLARIS)
		sed 's/^ARCH.*$/ARCH = SOLARIS/' $1 > $1.tmp
		;;
	SOLARISGCC)
		sed 's/^ARCH.*$/ARCH = SOLARISGCC/' $1 > $1.tmp
		;;
	SUN4GCC)
		sed 's/^ARCH.*$/ARCH = SUN4GCC/' $1 > $1.tmp
		;;
	T3D)
		sed 's/^ARCH.*$/ARCH = T3D/' $1 > $1.tmp
		;;
	T3E)
		sed 's/^ARCH.*$/ARCH = T3E/' $1 > $1.tmp
		;;
	NECSX4)
		sed 's/^ARCH.*$/ARCH = NECSX4/' $1 > $1.tmp
		;;
	SEQ)
		sed 's/^MODEL[ \t].*$/MODEL = SEQ/' $1 > $1.tmp
		;;
	MPI)
		sed 's/^MODEL[ \t].*$/MODEL = MPI/' $1 > $1.tmp
		;;
	NX)
		sed 's/^MODEL[ \t].*$/MODEL = NX/' $1 > $1.tmp
		;;
	NXLIB)
		sed 's/^MODEL[ \t].*$/MODEL = NXLIB/' $1 > $1.tmp
		;;
	PARIX)
		sed 's/^MODEL[ \t].*$/MODEL = PARIX/' $1 > $1.tmp
		;;
	PVM)
		sed 's/^MODEL[ \t].*$/MODEL = PVM/' $1 > $1.tmp
		;;
	SHMEM)
		sed 's/^MODEL[ \t].*$/MODEL = SHMEM/' $1 > $1.tmp
		;;
	SHMEMT3D)
		sed 's/^MODEL[ \t].*$/MODEL = SHMEMT3D/' $1 > $1.tmp
		;;
	STD_DOMAIN)
		sed 's/^DOM_MODULE.*$/DOM_MODULE = STD_DOMAIN/' $1 > $1.tmp
		;;
	GSF_DOMAIN)
		sed 's/^DOM_MODULE.*$/DOM_MODULE = GSF_DOMAIN/' $1 > $1.tmp
		;;
	DEBUG)
		sed 's/^DEBUG_MODE.*$/DEBUG_MODE = ON/' $1 > $1.tmp
		;;
	NODEBUG)
		sed 's/^DEBUG_MODE.*$/DEBUG_MODE = OFF/' $1 > $1.tmp
		;;
	CHACO)
		sed 's/^CHACO.*$/CHACO = ON/' $1 > $1.tmp
		;;
	NOCHACO)
		sed 's/^CHACO.*$/CHACO = OFF/' $1 > $1.tmp
		;;
	CAD)
		sed 's/^CAD.*$/CAD = ON/' $1 > $1.tmp
		;;
	NOCAD)
		sed 's/^CAD.*$/CAD = OFF/' $1 > $1.tmp
		;;
	*)
		echo "error: unrecognized option '" $2 "'. use 'ugconf -help' for help.";
		cp $1 $1.tmp
	esac;

	mv $1.tmp $1
}


##################################################################


# test whether object database should be used
if test "$1" = "-o"
then
	USE_OBJDB="true"
	shift
else
	USE_OBJDB="false"
fi




if test $# -eq 0
then 
	echo "current ug configuration is:";
	grep_valid_entries $UGROOT/ug.conf;
	if test "$USE_OBJDB" = "true"
	then
		echo
		objdb_show_contents;
	fi
	
	exit 0;
fi




# process arguments and edit ug.conf.new
cp $UGROOT/ug.conf $UGROOT/ug.conf.new
while [ $# -gt 0 ]; do
	( edit_ugconf $UGROOT/ug.conf.new $1; )
	shift;
done

# decide whether ug.conf has really been changed
grep_valid_entries $UGROOT/ug.conf > $UGROOT/ug.conf.old.1
grep_valid_entries $UGROOT/ug.conf.new > $UGROOT/ug.conf.new.1
if `diff $UGROOT/ug.conf.old.1 $UGROOT/ug.conf.new.1 >/dev/null `
then
	echo "nothing changed by these parameters."
	rm $UGROOT/ug.conf.old.1 $UGROOT/ug.conf.new.1
	rm $UGROOT/ug.conf.new
	exit 0;
fi
rm $UGROOT/ug.conf.old.1 $UGROOT/ug.conf.new.1






if test "$USE_OBJDB" = "true"
then
	objdb_save_current;
fi

mv $UGROOT/ug.conf.new $UGROOT/ug.conf

if test "$USE_OBJDB" = "true"
then
	objdb_restore_new;
fi

