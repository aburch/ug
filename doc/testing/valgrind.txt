Valgrind:

Valgrind is a flexible tool for debugging and profiling Linux-x86 
executables. The tool consists of a core, which provides a synthetic x86
CPU in software, and a series of "skins", each of which is a debugging or 
profiling tool. The architecture is modular, so that new skins can be 
created easily and without disturbing the existing structure.


Valgrind is designed to be as non-intrusive as possible. It works directly 
with existing executables. You don't need to recompile, relink, or otherwise 
modify, the program to be checked. Simply place the word valgrind at the start 
of the command line normally used to run the program, and tell it what skin 
you want to use.

So, for example, if you want to run the command ls -l using the heavyweight 
memory-checking tool, issue the command: valgrind --tool=memcheck ls -l. 
The --tool= parameter tells the core which skin is to be used. 

Regardless of which skin is in use, Valgrind takes control of your program 
before it starts. Debugging information is read from the executable and 
associated libraries, so that error messages can be phrased in terms of source 
code locations (if that is appropriate).

Your program is then run on a synthetic x86 CPU provided by the valgrind
core. As new code is executed for the first time, the core hands the code to 
the selected skin. The skin adds its own instrumentation code to this and
hands the result back to the core, which coordinates the continued execution 
of this instrumented code. 


First off, consider whether it might be beneficial to recompile your
application and supporting libraries with debugging info enabled (the -g
flag). Without debugging info, the best valgrind will be able to do is guess 
which function a particular piece of code belongs to, which makes both error 
messages and profiling output nearly useless. With -g, you'll hopefully get 
messages which point directly to the relevant source code lines.

Another flag you might like to consider, if you are working with C++, is 
-fno-inline. That makes it easier to see the function-call chain, which can 
help reduce confusion when navigating around large C++ apps. For whatever it's 
worth, debugging OpenOffice.org with Valgrind is a bit easier when using this 
flag.

You don't have to do this, but doing so helps Valgrind produce more accurate 
and less confusing error reports. Chances are you're set up like this already, 
if you intended to debug your program with GNU gdb, or some other debugger.



Memcheck:

The memcheck skin detects memory-management problems in your programs. All 
reads and writes of memory are checked, and calls to malloc/new/free/delete 
are intercepted. As a result, memcheck can detect the following problems:

    * Use of uninitialised memory
    * Reading/writing memory after it has been free'd
    * Reading/writing off the end of malloc'd blocks
    * Reading/writing inappropriate areas on the stack
    * Memory leaks -- where pointers to malloc'd blocks are lost forever
    * Mismatched use of malloc/new/new [] vs free/delete/delete []
    * Overlapping src and dst pointers in memcpy() and related functions
    * Some misuses of the POSIX pthreads API

Problems like these can be difficult to find by other means, often lying 
undetected for long periods, then causing occasional, difficult-to-diagnose 
crashes.


Command-line flags specific to memcheck:

    * --leak-check=no [default]
      --leak-check=yes

When enabled, search for memory leaks when the client program finishes. A 
memory leak means a malloc'd block, which has not yet been free'd, but to 
which no pointer can be found. Such a block can never be free'd by the 
program, since no pointer to it exists. Leak checking is disabled by 
default because it tends to generate dozens of error messages.

    * --show-reachable=no [default]
      --show-reachable=yes

When disabled, the memory leak detector only shows blocks for which it 
cannot find a pointer to at all, or it can only find a pointer to the middle
of. These blocks are prime candidates for memory leaks. When enabled, the 
leak detector also reports on blocks which it could find a pointer to. Your 
program could, at least in principle, have freed such blocks before exit. 
Contrast this to blocks for which no pointer, or only an interior pointer 
could be found: they are more likely to indicate memory leaks, because you 
do not actually have a pointer to the start of the block which you can hand 
to free, even if you wanted to.

    * --leak-resolution=low [default]
      --leak-resolution=med
      --leak-resolution=high

When doing leak checking, determines how willing Memcheck is to consider 
different backtraces to be the same. When set to low, the default, only the 
first two entries need match. When med, four entries have to match. When high, 
all entries need to match.

For hardcore leak debugging, you probably want to use --leak-resolution=high 
together with --num-callers=40 or some such large number. Note however that 
this can give an overwhelming amount of information, which is why the defaults 
are 4 callers and low-resolution matching.

Note that the --leak-resolution= setting does not affect Memcheck's ability to 
find leaks. It only changes how the results are presented.

    * --freelist-vol=<number> [default: 1000000]

When the client program releases memory using free (in C) or delete (C++),
that memory is not immediately made available for re-allocation. Instead it is 
marked inaccessible and placed in a queue of freed blocks. The purpose is to 
delay the point at which freed-up memory comes back into circulation. This 
increases the chance that Memcheck will be able to detect invalid accesses to 
blocks for some significant period of time after they have been freed.

This flag specifies the maximum total size, in bytes, of the blocks in the 
queue. The default value is one million bytes. Increasing this increases the 
total amount of memory used by Memcheck but may detect invalid uses of freed 
blocks which would otherwise go undetected.

    * --workaround-gcc296-bugs=no [default]
      --workaround-gcc296-bugs=yes

When enabled, assume that reads and writes some small distance below the stack 
pointer %esp are due to bugs in gcc 2.96, and does not report them. The "small 
distance" is 256 bytes by default. Note that gcc 2.96 is the default compiler
on some older Linux distributions (RedHat 7.X) and so you may well need to use 
this flag. Do not use it if you do not have to, as it can cause real errors to 
be overlooked. Another option is to use a gcc/g++ which does not generate 
accesses below the stack pointer. 2.95.3 seems to be a good choice in this
respect.

Unfortunately (27 Feb 02) it looks like g++ 3.0.4 has a similar bug, so you
may need to issue this flag if you use 3.0.4. A while later (early Apr 02)
this is confirmed as a scheduling bug in g++-3.0.4.

    * --partial-loads-ok=yes [the default]
      --partial-loads-ok=no

Controls how Memcheck handles word (4-byte) loads from addresses for which 
some bytes are addressible and others are not. When yes (the default), such 
loads do not elicit an address error. Instead, the loaded V bytes
corresponding to the illegal addresses indicate undefined, and those 
corresponding to legal addresses are loaded from shadow memory, as usual.

When no, loads from partially invalid addresses are treated the same as loads 
from completely invalid addresses: an illegal-address error is issued, and the 
resulting V bytes indicate valid data.

    * --cleanup=no
      --cleanup=yes [default]

This is a flag to help debug valgrind itself. It is of no use to end-users. 
When enabled, various improvments are applied to the post-instrumented 
intermediate code, aimed at removing redundant value checks.



Dart with Valgrind:

Valgrind is an open-source profiling tool that gives results similar to
purify. You will need to set VALGRIND_COMMAND in DartConfiguration.tcl.proto
to the location of your valgrind executable. Optionally, you can also set
VALGRIND_COMMAND_OPTIONS, though it defaults to the following.

-q --tool=memcheck --leak-check=yes --show-reachable=yes 
--workaround-gcc296-bugs=yes --num-callers=100

Finally, specify the Valgrind command when running the dashboard client

/usr/bin/tclsh /path/to/Dart/Source/Client/DashboardManager.tcl 
DartConfiguration.tcl Nightly Valgrind 



Valgrind errors on the dashboard:

MLK = Memory leak
PLK =
UMC = 
UMR = Uninitialized memory read
ABR = Array bounds read
ABW = Array bounds write
ABWL =
IPR =
NPR = Null pointer read
NPW = Null pointer write
ODS = 
COR =
EXU =
FMM = Freeing mismatched memory
FUM =
FMR = Free memory read
FMW = Free memory write
FFM = 
MAF =
SBW = Stack bound write
FIM = Freeing invalid memory
IPW = Invalid pointer write


Purify examples:

http://www.agsrhichome.bnl.gov/Controls/doc/purify/purify_info.html
