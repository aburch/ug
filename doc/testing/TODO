20040113:
*	1. introduce cp into testboard for web page
*	2. switching compilers (Thimo)
*	3. integration of test into UG Makefile mechanism
*	4. distinction between not applicable (NA) tests and failed builds (NOTRUN)
*		-> may modifications in Dart/Source/Client/test.tcl  and Dart/Source/Server/Dashboard.xsl
*			are necessary
*	5. restructuring of BUILD TEST SUBMIT cycle
*		-> perform all possible builds + perform all possible test
*		-> this avoids 4.
*	6. script for EXPERIMENTAL builds and tests

20040126:
*	1. DONE
*	6. DONE
*	7. Copy of the SITES directory
*	8. Testen von binnew NIGHTLY and EXPERIMENTAL
*	9. im DartConfiguration.tcl: ConfigureCommand: ..../ugconf_dart
*	10. extensions for application testing
*		- integration of testing into Makefiles: make test
*		- target test inside Makefile:
*			test:
*				ugconf $UG_BUILD_OPTIONS
*				ug_dart_conf.pl $APPL_DIRECTORY
*		- application developer creates his own DartTestfile

20040202:
*	4. 10. avoids 4.
*	5. 10. avoids 5.
*	7. DONE
*	8. DONE
*	11. Copying of TestingResults/Javascript/ for Calendar
*	12. Wiring between  NIGHTLY and EXPERIMENTAL Dashboards
*	13. GCOV info NOT for PC

20040203:
*	11. DONE

20040208:
*	3. DONE
*	13. DONE

20040216:
*	9. DONE
*	10. DONE

20040218:
*	12. DONE
20040224:
	14. repair of calendar for all browsers
		status: - konqueror date jump does not work
				    month jump does not work
			- netscape6 month jump does not work
*	15. handling of DartTestfile for applications
*		new file in UG/ with name DartTestFiles
*		this allow to switch on and off application tests
20040310:
*	16. Handling of ConfigureCommand output:
*		- ConfigureCommand is defined in DartConfiguration.tcl
*		- Configure.tcl provides Client-Side functionality
*		- Configure.xsl provides Server-Side functionality
*		--> web documents explaining tcl, xml, tsl easy and short
*		--> Learn TCL, XSLT, XML as necessary
20040323:
*	17. Management of all situations:
* 		1. -e lib_all: build ug with all possible configurations
*		2. -e test_all:
*		3. -e all: all tests and all lib
*		4. -e test -c <appl1:<testnames>>
*		5. -e lib -c <lib:<testnames>>
*	18. Extensions to multiple basis libs
*		<ECFS> = <LIB1:<CFS1>...<LIBN><CFSN>>
20040405:
*	18. not DONE
20040504:
*	16. DONE
*	17. DONE
*	18. DONE
*	19. delete README_EXPERIMENTAL-BUILDS.txt, ug_dart_cron_tests.plsave,
*	    ug_dart_co, ugpart
*	20. check in new versions of ug_dart_client_test, ug_dart_conf.pl, ug_dart.pl,
*	    ug_dart_tests.pl, DartCycleTimeline.fig, Dart-UG.fig, README_SETUP.txt,
*	    README_SCRIPTS.txt
*	21. add README_TESTS.txt
	22. overwork all scripts to get a final version
*	23. add a UG logo on the dashboard
*	24. update the scripts on hal and change the bin directory
*	    from /home/ugtest/bin to .../UG/ug/bin
*	25. describe make build in README_TESTS.txt
*	26. enable purify functionality
20040510:
*	23. DONE
*	24. DONE
*	25. DONE
20040523:
*	26. DONE
20040525:
*	27. UG/ug/TestCasesAll with all 48 important testcases
*	28. C++ compilation of UGlib
*	29. valgrind patch for Dart
*	30. Dashboard open from 20:00 to 8.00
20040605:
*	29. DONE: No patch but a new Dart version
20040608:
*	27. DONE
*	28. DONE
*	30 .DONE
20040608:
*	31. repair parallel startup
*	32. Why NA for TUTOR-tutor1-Linux-2.­4.­26-g ???
*	33. Full Coverage Info for applications cd,tutor from all directories!!!
*	34. Extension of DartTestFiles by TestCase filename
*	35. new architectures PCCPP, PCICPP
20040612:
*	31. DONE
*	34. DONE
*	35. DONE
*	36. check why parallel startup still doesn't work
20040615:
*	37. COURSE assembler Warnings detected as errors?
*	38. Enable doxygen
20040620:
*	32. DONE
*	33. DONE
20040627:
*	36. DONE
*	37. DONE
*	38. DONE
20040630:
*	39. extend Build.tcl exception list to supress assembler warnings (COURSE)
	40. create a patch for using Dart with UG
	41. link generation for doxygen docu
*	42. check for validity of test cases: cd =LGM, tutor=STD !!!
*	43. set the nightly start time
20040701:
*	43. DONE
20040702:
*	39. DONE
*	42. DONE
20040916:
	44. doxy docu for UG/tutor
	45. implement delete strategy
