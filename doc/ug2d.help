-
*****************************************************************************************
*                                                                                       *
*                         ug2d.help: built-in commands                                  *
*                                                                                       *
*****************************************************************************************

-
############################## general commands #########################################


-
##############################  PlotObjectTypes  #########################################

-grid > setplotobject setview plot
Grid                 # name of PlotObjType for plot of a grid: 2D
Grid [$c {0|1}] [$e {0|1}] [$n {0|1}] [$w {0|1}]
    $c {0|1}                        # plot colored:      no/yes
    $e {0|1}                        # plot ElemIDs:	     no/yes
    $n {0|1}                        # plot NodeIDs:      no/yes
    $m {0|1}                        # plot node markers: no/yes
    $w {c/i/r/a}                    # which elements to plot: 
                                        c  copies and up
                                        i  irregular and up
                                        r  regular and up
                                        a  all

										
-escalar > setplotobject setview plot
EScalar           # name of PlotObjType for plot of a scalar value: 2D
EScalar $e <ElemEvalProc> [$m {COLOR | CONTOURS_EQ}] [$f <fromValue>] [$t <toValue>] [$n <nContours>]
    $e <ElemEvalProc>               # name of element scalar evaluation procedure
    $d <depth>                      # depth of plot
    $m {COLOR | CONTOURS_EQ}        # mode: COLOR-plot or CONTOUR-plot
    $f <fromValue> $t <toValue>     # range [fromValue,toValue]
    $n <nContours>                  # number of contours
	$g {0|1}                        # plot grid (before CONTOUR after COLOR)

	
-evector > setplotobject setview plot
EVector           # name of PlotObjType for plot of a vector value: 2D
EVector $e <ElemEvalProc> [$c {0|1}] [$t <toValue>] [$r <rastersize>] [$l <cutlength>]
    $e <ElemEvalProc>               # name of element vector evaluation procedure
    $c {0|1}                        # cut vectors if to long
    $t <toValue>                    # range: [0,toValue]
    $r <rastersize>                 # physical meshsize of rasterpoints where
                                    # vectors are plotted
    $l <cutlength>                  # cutlength in units of rastersize

-vecmat > setplotobject setview plot
VecMat            # name of PlotObjType for plot of the Vector-Matrix graph
VecMat [$t [nd][ed][el]] [$o 0|1] [$m 0|1] [$i 0|1] [$d 0|1] [$c 0|1] [$e 0|1] [$b 0|1]
          [$M [<mat sym>]] [$V [<sol sym>]]

    $t [nd][ed][el]                 # display only specified vector types and their connections
    $o 0|1                          # show order (see also below)
    $m 0|1                          # plot markers for vectors with the following meaning
                                    # if order is specified:
                                    #   circle:    node-vector
                                    #   rhombus:   edge-vector
                                    #   square:    elem-vector
                                    #   the color indicates the cycle in which the vector was found
                                    # else
                                    #   circle:    FIRST-set
                                    #   rhombus:   LAST-set
                                    #   square:    CUT-set
                                    #   black:     VCLASS 0
                                    #   yellow:    VCLASS 1
                                    #   red:       VCLASS 2

    $i 0|1                          # plot indices with the following meaning
                                    # if order is specified:
                                    #   a letter F,L or C for the set
                                    #   a number for the cycle in which the vector was found
                                    # else
                                    #   just the VINDEX

    $d 0|1                          # show dependencies
    $c 0|1                          # also show connections
    $e 0|1                          # also show extra connections
    $b 0|1                          # also plot boundary
    $M [<mat sym>]                  # plot user data of <mat sym> for the selected vectors
                                    # and their neighbours. If <mat sym> is omitted no matrix
                                    # data will be plotted
    $V [<sol sym>]                  # plot user data of <sol sym> for the selected vectors.
                                    # If <sol sym> is omitted no vector data will be plotted
-bnodes > grid generator
bnodes         # generates boundary nodes

-makegrid > grid generator
makegrid   # generates grid
makegrid ${W|w|K|k} [$E]

${W|w|K|k}  # W resp. K are using the accellerator, 
            # W resp. w use the angle criterion,
            # K resp. k use the edge criterion
$E          # grid generator tries to create eqilateral triangles 

